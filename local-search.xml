<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React - 框架</title>
    <link href="/2020/05/04/React%20-%20%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/05/04/React%20-%20%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>React 的相关知识，内容包括简介、创建一个 React 项目、React 组件、props、state、事件绑定、Class 组件、函数组件。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>React 是一个用于创建用户界面的开源 JavaScript 框架<br>_<br><em>中文官网：React.js → <em>[</em>点击这里_](<a href="https://zh-hans.reactjs.org/" target="_blank" rel="noopener">https://zh-hans.reactjs.org/</a>)</em> _</p><h3 id="1-简单类比"><a href="#1-简单类比" class="headerlink" title="1. 简单类比"></a>1. 简单类比</h3><blockquote><p>Webpack 就像一个没有装修过的“毛坯房”，提供了一个基本的“房子”，满足遮风挡雨的需求，不能直接满足睡觉、写字等需求。</p></blockquote><blockquote><ul><li>想睡觉，自己添加床</li><li>想写字，自己添加桌子<br>_&gt; Vue 就像“中国风”的精装修，床、桌子等已经都帮我们搞定，不用自己添加。</li></ul></blockquote><blockquote><ul><li>如果需求不满足，也可以自己在上面增增减减做改动</li><li>因为 Vue 就是基于 Webpack 开发的</li></ul></blockquote><p>如果把 Webpack 比喻成一个没有装修过的“毛坯房”，把 Vue 比喻成“中国风”的精装修，那么 React 就是“欧美风”的精装修，基本需求帮我们搞定，自己可以在上面增增减减做改动。</p><h2 id="二、创建一个-React-项目"><a href="#二、创建一个-React-项目" class="headerlink" title="二、创建一个 React 项目"></a>二、创建一个 React 项目</h2><h3 id="1-CDN-引入-React"><a href="#1-CDN-引入-React" class="headerlink" title="1. CDN 引入 React"></a>1. CDN 引入 React</h3><ul><li>script 标签引入 「React」和「React DOM」</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/react/16.10.2/umd/react.development.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/react-dom/16.10.2/umd/react-dom.development.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="2-React-CLI-创建项目"><a href="#2-React-CLI-创建项目" class="headerlink" title="2. React CLI 创建项目"></a>2. React CLI 创建项目</h3><ul><li>我们可以直接在 JS 里使用 JSX 语法</li><li>因为 babel-loader 内置了 jsx-loader</li></ul><pre><code class="hljs dsconfig"><span class="hljs-string">yarn </span><span class="hljs-string">global </span><span class="hljs-string">add </span><span class="hljs-built_in">create-react-app</span><span class="hljs-built_in">create-react-app</span> <span class="hljs-string">react-demo-</span>1<span class="hljs-string">cd </span><span class="hljs-string">react-demo-</span>1<span class="hljs-string">yarn </span><span class="hljs-string">start</span></code></pre><h2 id="三、React-组件"><a href="#三、React-组件" class="headerlink" title="三、React 组件"></a>三、React 组件</h2><h3 id="1-基本公式"><a href="#1-基本公式" class="headerlink" title="1. 基本公式"></a>1. 基本公式</h3><p>React 的风格是“在 JS 里写标签”，它的基本公式如下，创建一个虚拟 DOM</p><ul><li>React.createElement(‘div’, ClassName=”greet”,Hello)</li></ul><ol><li>参数一接受字符串 / 类 / 函数</li><li>参数二写属性的 key 和 Value</li><li>参数三写文本内容</li></ol><p>React 的 babal-loader 能够让我们写 HTML 风格，然后转译成虚拟 DOM 形式</p><p>该网站可以让我们看到转译前后对比，帮助理解：<a href="https://babeljs.io/repl#?browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=Q&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.9.6&externalPlugins=" target="_blank" rel="noopener"><em>babel online</em></a></p><pre><code class="hljs routeros">&lt;div <span class="hljs-attribute">className</span>=<span class="hljs-string">"red"</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">"name"</span>&gt;Hello&lt;/div&gt;React.createElement(<span class="hljs-string">"div"</span>, &#123;  className: <span class="hljs-string">"red"</span>,  title: <span class="hljs-string">"name"</span>&#125;, <span class="hljs-string">"Hello"</span>);</code></pre><ul><li>参数一传入字符串，得到元素</li><li>参数一传入类，React 会构造出一个实例，调用 render 方法，获取其返回值</li><li>参数一传入函数，React 会调用这个函数，获取其返回值</li></ul><h3 id="2-使用组件"><a href="#2-使用组件" class="headerlink" title="2. 使用组件"></a>2. 使用组件</h3><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"App"</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Test</span> /&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)&#125;ReactDom.render(App(),querySelector(<span class="hljs-string">'#root'</span>))</code></pre><h3 id="3-类组件"><a href="#3-类组件" class="headerlink" title="3. 类组件"></a>3. 类组件</h3><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;constructor()&#123;  <span class="hljs-keyword">super</span>()    <span class="hljs-keyword">this</span>.state = &#123;n:<span class="hljs-number">100</span>&#125;  &#125;  add()&#123;  <span class="hljs-keyword">this</span>.setState(&#123;n:<span class="hljs-keyword">this</span>.state.n+<span class="hljs-number">1</span>&#125;)  &#125;render()&#123;<span class="hljs-keyword">return</span> (&lt;div className=<span class="hljs-string">"test"</span>&gt;    n:&#123;<span class="hljs-keyword">this</span>.state.n&#125;    &lt;button onClick=&#123;()=&gt;<span class="hljs-keyword">this</span>.add()&#125;&gt;+<span class="hljs-number">1</span>&lt;/button&gt;    &lt;/div&gt;)  &#125;&#125;</code></pre><h3 id="4-函数组件"><a href="#4-函数组件" class="headerlink" title="4. 函数组件"></a>4. 函数组件</h3><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> Test2 = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;  <span class="hljs-keyword">let</span> [n, setN] = React.useState(<span class="hljs-number">100</span>)  <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"test2"</span>&gt;</span></span><span class="xml">n:&#123;n&#125;</span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setN(n + 1)&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)&#125;</code></pre><h3 id="5-组件的特点"><a href="#5-组件的特点" class="headerlink" title="5. 组件的特点"></a>5. 组件的特点</h3><p><strong>类组件中</strong></p><ul><li>直接修改 state.n 不会更新到 UI，需要使用 setState() 异步更新 UI</li><li>setState(this.state) 不被推荐，React 希望我们不要修改旧的 state，不可变数据</li><li>这是函数式理念</li></ul><p><strong>函数组件中</strong></p><ul><li>通过 setX 改变数据，它永远不改变旧 state，它产生新 state</li><li>没有 this，一律使用参数和变量</li></ul><h2 id="四、props"><a href="#四、props" class="headerlink" title="四、props"></a>四、props</h2><ul><li>类比 Vue 中的 props</li></ul><p>React 中，你可以传字符串，也可以传表达式</p><ul><li>传字符串，用 “” 括起来</li><li>传表达式，用 {} 括起来</li></ul><h3 id="1-类组件-props"><a href="#1-类组件-props" class="headerlink" title="1. 类组件 props"></a>1. 类组件 props</h3><ul><li>通过 this.props.message 可以拿到父元素传的参数</li></ul><pre><code class="hljs axapta"><span class="hljs-comment">// 父元素传参给 Test</span>&lt;Test message=<span class="hljs-string">"Hello"</span> /&gt;<span class="hljs-comment">// 子元素直接使用参数</span>&lt;<span class="hljs-keyword">div</span>&gt;父元素给我传的参数是：&#123;<span class="hljs-keyword">this</span>.props.message&#125;&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre><h3 id="2-函数组件-props"><a href="#2-函数组件-props" class="headerlink" title="2. 函数组件 props"></a>2. 函数组件 props</h3><ul><li>通过 props.messge2 可以拿到父元素传的参数</li></ul><pre><code class="hljs javascript"><span class="hljs-comment">// 父元素传参给 Test2</span><span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>&lt;Test2 message2=&#123;<span class="hljs-string">`你今年<span class="hljs-subst">$&#123;<span class="hljs-number">20</span>&#125;</span>岁了`</span>&#125;&gt;<span class="hljs-comment">// 子元素通过函数接收参数并使用</span><span class="hljs-keyword">let</span> Test2 = (props)&#123;<span class="hljs-keyword">return</span> (  &lt;div&gt;父元素传给我的参数是：&#123;props.message2&#125;&lt;<span class="hljs-regexp">/div&gt;</span><span class="hljs-regexp">  )</span><span class="hljs-regexp">&#125;</span></code></pre><h2 id="五、state"><a href="#五、state" class="headerlink" title="五、state"></a>五、state</h2><ul><li>类比 Vue 中的 data</li></ul><h3 id="1-类组件-state"><a href="#1-类组件-state" class="headerlink" title="1. 类组件 state"></a>1. 类组件 state</h3><ul><li>初始化数据，this.state = {n: 100}</li><li>读数据，{this.state.n}</li><li>改数据，add(){ this.setState( { n: this.state.n + 1 } ) }<ul><li>不能直接 this.setState.n +=1</li><li>因为 React 不会一直监听数据对象的变化</li></ul></li></ul><p>React 希望改变数据之后，传一个新的数据对象，它不推荐「在原有 state 修改，再传这个 state」</p><ul><li>React 理念是：数据是不可变的</li></ul><p>setState 是一个异步的更新 UI 过程，为了不混淆旧 state 和新 state，更加推荐在 setState 里面传函数</p><pre><code class="hljs pf">add = ()=&gt;&#123;<span class="hljs-built_in">set</span>State((<span class="hljs-keyword">state</span>)=&gt;(&#123;x: <span class="hljs-keyword">state</span>.x + <span class="hljs-number">1</span>&#125;))&#125;</code></pre><h3 id="2-函数组件-state"><a href="#2-函数组件-state" class="headerlink" title="2. 函数组件 state"></a>2. 函数组件 state</h3><ul><li>使用 useState 返回数组</li><li>第一项用于读数据</li><li>第二项用于写数据</li></ul><pre><code class="hljs jboss-cli">let [n,<span class="hljs-keyword">set</span>N] = useState<span class="hljs-params">(100)</span><span class="hljs-string">//</span> n 用于读，<span class="hljs-keyword">set</span>N 用于写</code></pre><ul><li>setN 永远不会改变 n，它会产生一个新的 n</li><li>这和 this.setState 不同，this.setState 会等一会改变 n</li></ul><h3 id="3-复杂-state"><a href="#3-复杂-state" class="headerlink" title="3. 复杂 state"></a>3. 复杂 state</h3><p>类组件中，对 state 的部分数据修改，其他数据它会自动沿用上次的值</p><ul><li>类组件 setState 会自动合并第一层属性，不会合并第二层属性</li><li>熟练运用 …</li></ul><pre><code class="hljs pf">...this.<span class="hljs-keyword">state</span>Object.assign()</code></pre><p>函数组件中，对 state 部分修改，其他数据不会沿用上次的值</p><ul><li>函数组件 setState 不会自动合并</li><li>熟练运用 …</li></ul><pre><code class="hljs pf">// 推荐使用如下方式let [m,<span class="hljs-built_in">set</span>M] = useState(<span class="hljs-number">100</span>)let [n,<span class="hljs-built_in">set</span>N] = useState(<span class="hljs-number">100</span>)// 如果想使用 <span class="hljs-keyword">state</span> 对象的形式，自己主动复制一份let [<span class="hljs-keyword">state</span>,<span class="hljs-built_in">set</span>State] = useState(&#123;m:<span class="hljs-number">100</span>,n:<span class="hljs-number">100</span>&#125;)...<span class="hljs-keyword">state</span></code></pre><h2 id="六、事件绑定"><a href="#六、事件绑定" class="headerlink" title="六、事件绑定"></a>六、事件绑定</h2><h3 id="1-类组件的事件绑定"><a href="#1-类组件的事件绑定" class="headerlink" title="1. 类组件的事件绑定"></a>1. 类组件的事件绑定</h3><ul><li>()=&gt;fn() 的写法是最安全的，当外部调用该函数传入 this 时，函数 fn 如果里面使用 this，则不会改变其 this 的指向</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>fn()&#125;&gt;+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></code></pre><h3 id="2-事件绑定终极写法"><a href="#2-事件绑定终极写法" class="headerlink" title="2. 事件绑定终极写法"></a>2. 事件绑定终极写法</h3><ul><li>fn 写成箭头函数，取消中间转换的过程</li><li>以下写法中，add 函数 写在 constructor 外面，也能添加到实例上</li></ul><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;constructor()&#123;  <span class="hljs-keyword">super</span>()  &#125;add = ()=&gt;&#123;<span class="hljs-keyword">this</span>.setState(&#123;n: <span class="hljs-keyword">this</span>.state.n + <span class="hljs-number">1</span>&#125;)&#125;&#125;&lt;button onClick=&#123;add&#125;&gt;+<span class="hljs-number">1</span>&lt;/button&gt;</code></pre><h2 id="七、Class-组件"><a href="#七、Class-组件" class="headerlink" title="七、Class 组件"></a>七、Class 组件</h2><h3 id="1-创建-Class-组件"><a href="#1-创建-Class-组件" class="headerlink" title="1. 创建 Class 组件"></a>1. 创建 Class 组件</h3><ul><li>使用 ES6 方式创建组件更好</li></ul><p><strong>ES5 方式（已过时）</strong></p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span><span class="hljs-keyword">const</span> App = React.createComponent(render()&#123;  <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)  &#125;)</code></pre><p><strong>ES6 方式</strong></p><pre><code class="hljs scala"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span> from <span class="hljs-symbol">'reac</span>t'<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;constructor(props)&#123;  <span class="hljs-keyword">super</span>(props)  &#125;  render()&#123;  <span class="hljs-keyword">return</span> (&lt;div&gt;<span class="hljs-type">Hello</span>&lt;/div&gt;)  &#125;&#125;</code></pre><h3 id="2-props"><a href="#2-props" class="headerlink" title="2. props"></a>2. props</h3><ul><li>传 props：父组件中，<App2 data={this.state.n} func={this.func}>Hello</App><ul><li>父组件传数据时，props 被包装成一个对象，{n:100, func:…, children: Hello}</li><li>func 是一个回调</li></ul></li><li>读 props：子组件中，this.xxx</li><li>写 props，不要修改 props 的值<ul><li>这是一个理念，既然是外部传进来的数据，那就由外部修改</li></ul></li></ul><pre><code class="hljs scala"><span class="hljs-comment">// 父组件</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;constructor()&#123;  <span class="hljs-keyword">super</span>()    <span class="hljs-keyword">this</span>.state=&#123;n:<span class="hljs-number">100</span>&#125;  &#125;  func=()=&gt;&#123;&#125;  render()&#123;  <span class="hljs-keyword">return</span> (    &lt;<span class="hljs-type">App2</span> data=&#123;<span class="hljs-keyword">this</span>.state.n&#125; func=&#123;<span class="hljs-keyword">this</span>.func&#125;&gt;<span class="hljs-type">Hello</span>&lt;/<span class="hljs-type">App</span>&gt;    )  &#125;&#125;<span class="hljs-comment">// 子组件</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;constructor(props)&#123;  <span class="hljs-keyword">super</span>(props)    render()&#123;    <span class="hljs-keyword">return</span> (      &lt;div onClick=&#123;<span class="hljs-keyword">this</span>.props.func&#125;&gt;  <span class="hljs-comment">// func 函数</span>      &lt;div&gt;&#123;<span class="hljs-keyword">this</span>.props.n&#125;&lt;/div&gt;  <span class="hljs-comment">// 100</span>      &lt;div&gt;&#123;<span class="hljs-keyword">this</span>.props.children&#125;&lt;/div&gt;  <span class="hljs-comment">// Hello</span>      &lt;/div&gt;      )    &#125;  &#125;&#125;</code></pre><p>componentWillReceiveProps（已经弃用）</p><p>这是一个生命周期钩子，在 props 变化时触发，现已更名为 UNSAFE_componentWillReceiveProps</p><pre><code class="hljs haxe">componentWillReceiveProps(<span class="hljs-keyword">new</span><span class="hljs-type">Props</span>,<span class="hljs-keyword">new</span><span class="hljs-type">Context</span>)&#123;console.log(<span class="hljs-built_in">this</span>.props)  <span class="hljs-comment">// 旧的 props</span>  console.log(<span class="hljs-keyword">new</span><span class="hljs-type">Props</span>)  <span class="hljs-comment">// 新的 props</span>&#125;</code></pre><h3 id="3-state"><a href="#3-state" class="headerlink" title="3. state"></a>3. state</h3><ul><li>创建 state：在 constructor 函数中，this.state = xxx</li><li>读 state：this.state</li><li>写 state：this.setState({n:100})<ul><li>它是异步更新 UI 的</li><li>this.setState(state=&gt;({n: state.n+1}))，这种写法能够更方便理解 state 的值</li><li>setState 函数还可以接收一个函数参数 fn，在写 state 成功后运行</li><li>写 state 会 shallow merge，会自动将新、旧 state 进行一级合并</li><li>不推荐直接在旧 state 直接修改值，虽然这是可行的</li></ul></li></ul><p>使用 React.PureComponent 会在 render 之前把新 props、state 和旧 props、state 做比较，只比较第一层，如果有变化，则会 render</p><h3 id="4-constructor"><a href="#4-constructor" class="headerlink" title="4. constructor"></a>4. constructor</h3><ul><li>初始化 props 和 state</li></ul><h3 id="5-shouldComponentUpdate"><a href="#5-shouldComponentUpdate" class="headerlink" title="5. shouldComponentUpdate"></a>5. shouldComponentUpdate</h3><ul><li>返回 true，UI 更新</li><li>返回 false，阻止 UI 更新</li></ul><p>它允许我们手动判断是否要进行组件更新，我们可以根据应用场景灵活设置返回值，以避免不必要的更新</p><p>React 有一个功能自动判断 UI 更新，名字叫 React.PureComponent，可以代替 React.Component</p><ul><li>同样，它只判断第一层</li></ul><h3 id="6-render"><a href="#6-render" class="headerlink" title="6. render"></a>6. render</h3><ul><li>展示视图 return (<div>…<div>)，只能有一个根元素</li><li>如果有两个根元素，则外部再套一个 React.Fragment 标签，可简写成 &lt;&gt;&lt;/&gt;</li></ul><p>render 可以写 if…else，?: 表达式，不能直接写 for 循环，需要用数组，可以写 array.map（循环）</p><h3 id="7-componentDidMount"><a href="#7-componentDidMount" class="headerlink" title="7. componentDidMount"></a>7. componentDidMount</h3><ul><li>在元素插入页面后执行代码，这些代码依赖 DOM</li><li>此处可以写发起加载数据的 AJAX 请求</li><li>首次渲染会执行此钩子</li></ul><h3 id="8-componentDidUpdate"><a href="#8-componentDidUpdate" class="headerlink" title="8. componentDidUpdate"></a>8. componentDidUpdate</h3><ul><li>在视图更新后执行代码</li><li>此处也可以发起 AJAX 请求，用于更新数据</li><li>首次渲染不会执行此钩子</li></ul><h3 id="9-componentWillUnmount"><a href="#9-componentWillUnmount" class="headerlink" title="9. componentWillUnmount"></a>9. componentWillUnmount</h3><ul><li>组件将要被移除页面然后被销毁时执行代码</li><li>unmount 过的组件不会再次 mount</li></ul><h2 id="八、函数组件"><a href="#八、函数组件" class="headerlink" title="八、函数组件"></a>八、函数组件</h2><ul><li>函数组件能完全代替 Class 组件</li><li>useState 解决 state</li><li>useEffect 解决 lifecycle</li><li>它还有一些 Hooks</li><li>它可以自定义钩子满足需求</li></ul><h3 id="1-创建函数组件"><a href="#1-创建函数组件" class="headerlink" title="1. 创建函数组件"></a>1. 创建函数组件</h3><pre><code class="hljs javascript"><span class="hljs-comment">// 常用方式</span><span class="hljs-keyword">const</span> App = <span class="hljs-function">(<span class="hljs-params">props</span>)=&gt;</span>&#123;<span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>props.message<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&#125;<span class="hljs-comment">// 省略 () 和 return</span><span class="hljs-keyword">const</span> App2 = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>props.message<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-comment">// 使用普通函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App3</span>(<span class="hljs-params">props</span>)</span>&#123;<span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>props.message<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&#125;</code></pre><h3 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2. useEffect"></a>2. useEffect</h3><p><strong>模拟 componentDidMount</strong></p><ul><li>第二个参数是空数组</li></ul><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">useEffect</span><span class="hljs-params">(()</span></span>=&#123;console.log(<span class="hljs-string">'第一次渲染'</span>)&#125;,[])</code></pre><p><strong>模拟 componentDidUpdate</strong></p><ul><li>任意数据变化时触发，第二个参数省略</li><li>部分数据变化时触发，第二个参数写成包含数据的数组</li></ul><pre><code class="hljs coffeescript">useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'任意数据变了'</span>)&#125;)useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'n 或 m 变化了'</span>)&#125;,[m,n])</code></pre><p>该用法在数据第一次渲染时也会触发，如果不想第一次触发，可以自己写一个 useUpdate 钩子满足需求</p><p><strong>模拟 componentWillUnmount</strong></p><ul><li>函数里面套一个函数</li></ul><pre><code class="hljs javascript">useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'第一次渲染'</span>)  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'组件要消亡了'</span>)  &#125;&#125;)</code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue - 框架</title>
    <link href="/2020/05/04/Vue%20-%20%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/05/04/Vue%20-%20%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>Vue 的相关知识，内容包括简介、创建一个 Vue 项目、Vue 的使用、Vue 实例和选项、Data、DOM、Lifecycle Hooks、Assets、Composition、Misc。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Vue 是一个用于创建用户界面的开源 JavaScript 框架_<br>_<br><em>中文官网：Vue.js → <a href="https://cn.vuejs.org/index.html" target="_blank" rel="noopener">点击这里</a> _<br>_<br>_中文官网：Vue CLI → <a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">点击这里</a></em></p><p>Vue.js 是 Vue 的使用教程，Vue CLI 是 Vue 的命令行工具</p><h3 id="1-简单类比"><a href="#1-简单类比" class="headerlink" title="1. 简单类比"></a>1. 简单类比</h3><blockquote><p>Webpack 就像一个没有装修过的“毛坯房”，提供了一个基本的“房子”，满足遮风挡雨的需求，不能直接满足睡觉、写字等需求。</p></blockquote><blockquote><ul><li>想睡觉，自己添加床</li><li>想写字，自己添加桌子</li></ul></blockquote><p>_<br>如果把 Webpack 比喻成一个没有装修过的“毛坯房”，那么 Vue 就是“中国风”的精装修，床、桌子等已经都帮我们搞定，不用自己添加。</p><ul><li>如果需求不满足，也可以自己在上面增增减减做改动</li><li>因为 Vue 就是基于 Webpack 开发的</li></ul><h2 id="二、创建一个-Vue-项目"><a href="#二、创建一个-Vue-项目" class="headerlink" title="二、创建一个 Vue 项目"></a>二、创建一个 Vue 项目</h2><p>Vue 有两个版本，「完整版」和「不完整版」，「不完整体积」比「完整版体积」小 30% 左右。</p><p>「完整版」多出来的代码是编译相关的，能够编译出我们在 JS 中写的的 HTML 代码。</p><h3 id="1-CDN-引入-Vue"><a href="#1-CDN-引入-Vue" class="headerlink" title="1. CDN 引入 Vue"></a>1. CDN 引入 Vue</h3><p>**</p><ul><li>script 标签引入「Vue完整版」/「Vue不完整版」</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">srcipt</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/vue/2.6.11/vue.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.bootcss.com/vue/2.6.11/vue.runtime.min.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h3 id="2-使用-Vue-CLI-创建-Vue-项目"><a href="#2-使用-Vue-CLI-创建-Vue-项目" class="headerlink" title="2. 使用 Vue CLI 创建 Vue 项目"></a>2. 使用 Vue CLI 创建 Vue 项目</h3><ul><li>这里默认使用的是「Vue 不完整版」</li><li>通过使用 vue-loader 体验完整版功能</li></ul><pre><code class="hljs properties"><span class="hljs-attr">yarn</span> <span class="hljs-string">global add @vue/cli</span><span class="hljs-attr">vue</span> <span class="hljs-string">create vue-demo-1</span><span class="hljs-attr">cd</span> <span class="hljs-string">vue-demo-1</span><span class="hljs-attr">yarn</span> <span class="hljs-string">serve</span></code></pre><h2 id="三、Vue-的使用"><a href="#三、Vue-的使用" class="headerlink" title="三、Vue 的使用"></a>三、Vue 的使用</h2><p>当使用「不完整版」时，有一个方法办法能够体验「完整版」的功能，就是使用 Webpack 模块化的思想。</p><ul><li>通过使用 vue-loader 引入 vue 文件</li><li>vue-loader 可以把 vue 文件编译成 JS</li></ul><h3 id="1-main-js"><a href="#1-main-js" class="headerlink" title="1. main.js"></a>1. main.js</h3><p>创建一个 Vue 实例，渲染 App.vue 到 id 为 app 的标签</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span>Vue.config.productionTip = <span class="hljs-literal">false</span><span class="hljs-keyword">new</span> Vue(&#123;  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),&#125;).$mount(<span class="hljs-string">'#app'</span>)</code></pre><h3 id="2-App-vue"><a href="#2-App-vue" class="headerlink" title="2. App.vue"></a>2. App.vue</h3><p>三部分内容：template 标签、script 标签、style 标签</p><ul><li>template 标签里面写 HTML，使用 XML 语法</li><li>script 标签里面写 JS</li><li>style 标签里面写 CSS</li></ul><p>App.vue 中</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h2 id="四、Vue-实例和选项"><a href="#四、Vue-实例和选项" class="headerlink" title="四、Vue 实例和选项"></a>四、Vue 实例和选项</h2><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Vue(<span class="hljs-params">options</span>)</span></code></pre><ul><li>以上语句创造了一个 Vue 的实例 vm，它接受 options 参数</li><li>vm 封装了对视图的所有操作，包括数据读写、事件绑定、DOM 更新</li><li>options 称之为选项，选项分成六类</li></ul><ol><li>数据：→ <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener"><em>点击这里</em></a></li><li>DOM：→ <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-DOM" target="_blank" rel="noopener"><em>点击这里</em></a></li><li>生命周期钩子：→ <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noopener"><em>点击这里</em></a></li><li>资源：→ <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E8%B5%84%E6%BA%90" target="_blank" rel="noopener"><em>点击这里</em></a></li><li>组合：→ <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%BB%84%E5%90%88" target="_blank" rel="noopener"><em>点击这里</em></a></li><li>其他：→ <a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E5%85%B6%E5%AE%83" target="_blank" rel="noopener"><em>点击这里</em></a></li></ol><ul><li>中文、英文对照着看，这岂不是又一个学习英语的好时机<a href="https://emojipedia.org/crossed-fingers/" target="_blank" rel="noopener">🤞</a></li></ul><p>_</p><h2 id="五、Options-Data"><a href="#五、Options-Data" class="headerlink" title="五、Options / Data"></a>五、Options / Data</h2><p>data、props、propsData、computed、metheds、watch</p><h3 id="1-data、methods"><a href="#1-data、methods" class="headerlink" title="1. data、methods"></a>1. data、methods</h3><ul><li>data 支持对象和函数，实例中可以写对象和函数，组件中必须使用函数</li><li>data 使用函数，返回一个对象</li><li>metheds 支持事件处理函数和普通函数</li></ul><p>Vue.vue 中</p><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;n&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"add()"</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;filter()&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><span class="xml">export default &#123;</span><span class="xml">  data() &#123;</span><span class="xml">    return &#123;</span><span class="xml">      n: 100,</span><span class="xml">      array: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><span class="xml">    &#125;;</span><span class="xml">  &#125;,</span><span class="xml">  methods: &#123;</span><span class="xml">    add() &#123;</span><span class="xml">      this.n += 1;</span><span class="xml">    &#125;,</span><span class="xml">    filter() &#123;</span><span class="xml">    console.log("执行了一次 filter 函数")</span><span class="xml">      return this.array.filter(i =&gt; i % 2 === 0);</span><span class="xml">    &#125;</span><span class="xml">  &#125;,</span><span class="xml">&#125;;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre><h3 id="2-直接、间接获取数据"><a href="#2-直接、间接获取数据" class="headerlink" title="2. 直接、间接获取数据"></a>2. 直接、间接获取数据</h3><ul><li>假设已知 a 的值，现在要获取 a+1 的值</li><li>通过表达式和函数两种方式获取</li></ul><pre><code class="hljs javascript">a = <span class="hljs-number">1</span>b = a + <span class="hljs-number">1</span>c = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> a+<span class="hljs-number">1</span>&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`b:<span class="hljs-subst">$&#123;b&#125;</span>,c:<span class="hljs-subst">$&#123;c()&#125;</span>`</span>)</code></pre><p>打印结果：b:2,c:2</p><ul><li>表达式方式是及时的，函数方式延迟性的</li><li>函数方式的延迟有个优点，数据之间不会混淆</li></ul><p>假设去修改表达式和函数，现在要获取 a+2 的值，原来的 b、c 复制一份给 b2、c2</p><pre><code class="hljs javascript">b2 = bc2 = cb = a + <span class="hljs-number">2</span>c = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> a+<span class="hljs-number">2</span>&#125;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`b:<span class="hljs-subst">$&#123;b&#125;</span>,c:<span class="hljs-subst">$&#123;c()&#125;</span>`</span>)<span class="hljs-comment">// b:3,c:3</span></code></pre><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`b2:<span class="hljs-subst">$&#123;b&#125;</span>,c2:<span class="hljs-subst">$&#123;c2()&#125;</span>`</span>)<span class="hljs-comment">// b2:3,c2:2</span></code></pre><p>可以看到，原来复制而来的 b2 变了，c2 没变，这就是函数方式的优点</p><p>其实表达式复制是可以的，复制 a+1 即可，当表达式很复杂呢？复制同样也就很复杂，而函数不同，直接变量赋值搞定</p><h3 id="3-props"><a href="#3-props" class="headerlink" title="3. props"></a>3. props</h3><p>Vue.vue 中</p><pre><code class="hljs xquery"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><span class="xml"></span><span class="xquery">&#123;&#123;message&#125;</span><span class="xml">&#125;</span><span class="xml"></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"fn"</span>&gt;</span>call fn<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span>export <span class="hljs-keyword">default</span> = &#123;prop:[<span class="hljs-string">'message'</span>,<span class="hljs-string">'fn'</span>]&#125;</code></pre><pre><code class="hljs 1c">&lt;Vue message=<span class="hljs-string">"Hello"</span>&gt;  <span class="hljs-comment">// 这是传字符串</span><span class="hljs-comment">// 如果要传实例上的内容呢？ this.n - 数据、this.add - 函数</span>&lt;Vue :message=<span class="hljs-string">"n"</span> :fn=<span class="hljs-string">"add /&gt;</span></code></pre><h3 id="4-computed"><a href="#4-computed" class="headerlink" title="4. computed"></a>4. computed</h3><ul><li>computed 是计算属性，可以对 data 属性中的值做计算生成一个新的属性</li><li>如果给它一个函数，这个函数默认是 getter</li><li>也可以自己设置 setter，给它一个对象，address: {getter(), setter()}</li></ul><pre><code class="hljs dts"><span class="hljs-params">&lt;template&gt;</span>  <span class="hljs-params">&lt;div id="app"&gt;</span>    <span class="hljs-params">&lt;div&gt;</span>&#123;&#123;user&#125;&#125;<span class="hljs-params">&lt;/div&gt;</span>    <span class="hljs-params">&lt;div&gt;</span>&#123;&#123;address&#125;&#125;<span class="hljs-params">&lt;/div&gt;</span>  <span class="hljs-params">&lt;/div&gt;</span><span class="hljs-params">&lt;/template&gt;</span>export <span class="hljs-class">default </span>&#123;  data() &#123;    <span class="hljs-class">return </span>&#123;<span class="hljs-symbol">      user:</span> &#123;<span class="hljs-symbol">        name:</span> <span class="hljs-string">"小白"</span>,<span class="hljs-symbol">        cellphone:</span> <span class="hljs-string">"1383838438"</span>,<span class="hljs-symbol">        email:</span> <span class="hljs-string">"xiaobai.qq.com"</span>      &#125;    &#125;;  &#125;,<span class="hljs-symbol">  computed:</span> &#123;    address() &#123;      <span class="hljs-class">let </span>&#123;user&#125; = this;      return `姓名：$&#123;user.name&#125;，电话：$&#123;user.cellphone&#125;，邮箱：$&#123;user.email&#125;`;    &#125;  &#125;&#125;</code></pre><p>computed 里面写的是一个方法，在页面中直接把这个方法，它会自动读取这个函数的返回值。</p><h3 id="5-watch"><a href="#5-watch" class="headerlink" title="5. watch"></a>5. watch</h3><ul><li>监听 data 中的数据，当有变化时，执行一个函数</li><li>watch 里面是接收一个函数，传入两个参数，新数据和旧数据</li><li>watch 是异步的</li><li>watch 里面也可以接收一个对象，对象里面两个函数<ul><li>hander()  // 函数内容和上面的一样</li><li>immediate: true  // 意思是第一次渲染的时候也运行一下函数</li></ul></li><li>watch 监听简单数据类型，数据变了就一定变了</li><li>watch 监听对象的地址，当对象内部内容发成变化，watch 无法监听到<ul><li>想要监听对象内部，再添加一个属性</li><li>deep: true</li></ul></li><li>还可以使用全局 API 的方式监听数据，可以把放到生命周期钩子里<ul><li>vm.$watch()</li></ul></li></ul><p><em>watch 完整用法（官方文档）：</em><a href="https://cn.vuejs.org/v2/api/#watch" target="_blank" rel="noopener"><em>点击这里</em></a></p><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>&#123;  data() &#123;    return &#123;      n: 100,      array: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]    &#125;;  &#125;,  watch: &#123;  n(newValue,oldValue)&#123;console.log(`<span class="hljs-keyword">from</span> <span class="hljs-variable">$&#123;oldValue&#125;</span> <span class="hljs-keyword">to</span> <span class="hljs-variable">$&#123;newValue&#125;</span>`)&#125;  &#125;&#125;</code></pre><h3 id="6-computed-和-watch-的区别"><a href="#6-computed-和-watch-的区别" class="headerlink" title="6. computed 和 watch 的区别"></a>6. computed 和 watch 的区别</h3><p>computed 是计算属性的意思，watch 是监听的意思。</p><p>computed 是用来计算出一个值的，这个值不需要加括号，调用的时候不需要加括号，根据依赖会自动缓存，如果依赖不变，它不会重新计算。</p><p>watch 是如果某个属性变化了，去执行一个函数。它有两个选项，immediate 表示是否要在第一次执行渲染这个函数，deep 意思是监听一个对象，是否要看对象里面的属性的变化。</p><h2 id="六、DOM"><a href="#六、DOM" class="headerlink" title="六、DOM"></a>六、DOM</h2><p>el、template、render、renderError</p><h3 id="1-el"><a href="#1-el" class="headerlink" title="1. el"></a>1. el</h3><ul><li>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标</li><li>与 $mount() 有替换关系</li></ul><p>main.js 中</p><pre><code class="hljs arcade"><span class="hljs-comment">// 方式一</span><span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">'#app'</span>,  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),&#125;)<span class="hljs-comment">// 方式二</span><span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">'#app'</span>,  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App),&#125;).<span class="hljs-symbol">$mou</span>nt(<span class="hljs-string">'#app'</span>)</code></pre><h3 id="2-template"><a href="#2-template" class="headerlink" title="2. template"></a>2. template</h3><p>vue 文件中 template 标签的的一些语法</p><ul><li>使用 XML 语法（不是 HTML）</li><li>使用两个大括号插入表达式</li><li>使用 v-html、v-on、v-bind 等指令操作 DOM</li><li>使用 v-if、v-for 等指令实现条件判断和循环</li></ul><p><strong>展示内容</strong></p><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;object.a&#125;&#125;</span><span class="xml">  </span><span class="hljs-template-variable">&#123;&#123;n+1&#125;&#125;</span><span class="xml">  </span><span class="hljs-template-variable">&#123;&#123;fn&#125;&#125;</span><span class="xml">  </span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-text</span>=<span class="hljs-string">"表达式"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">'x'</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-pre</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;n&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><p><strong>绑定属性</strong></p><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-bind:src</span>=<span class="hljs-string">"x"</span> /&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">"y"</span> /&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">"</span></span></span><span class="hljs-template-variable">&#123;border:1px solid red&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><p><strong>绑定事件</strong></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">"add"</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"add()"</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"n+1"</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><p><strong>条件判断</strong></p><pre><code class="hljs gml">&lt;template&gt;&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">if</span>=<span class="hljs-string">"x&gt;0"</span>&gt;  显示 <span class="hljs-symbol">x</span> &gt; <span class="hljs-number">0</span>  &lt;/<span class="hljs-keyword">div</span>&gt;&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>-<span class="hljs-keyword">if</span>=<span class="hljs-string">"&lt;0"</span>&gt;  显示 <span class="hljs-symbol">x</span> = <span class="hljs-number">0</span>  &lt;/<span class="hljs-keyword">div</span>&gt;&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">else</span>&gt;  显示 <span class="hljs-symbol">x</span> = <span class="hljs-number">0</span>  &lt;/<span class="hljs-keyword">div</span>&gt;&lt;/template&gt;</code></pre><p><strong>循环</strong></p><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(value, name) in obj"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"name"</span>&gt;</span></span><span class="xml">    属性名：</span><span class="hljs-template-variable">&#123;&#123;name&#125;&#125;</span><span class="xml">  属性值：</span><span class="hljs-template-variable">&#123;&#123;value&#125;&#125;</span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span></code></pre><p>显示和隐藏</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">"n%2 === 0"</span>&gt;</span>n 是偶数<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></code></pre><h2 id="七、Lifecycle-Hooks"><a href="#七、Lifecycle-Hooks" class="headerlink" title="七、Lifecycle Hooks"></a>七、Lifecycle Hooks</h2><p>beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、activeated、deactivated、beforeDestroy、destroyed、errorCaptured</p><h3 id="1-created、mounted"><a href="#1-created、mounted" class="headerlink" title="1. created、mounted"></a>1. created、mounted</h3><pre><code class="hljs less"><span class="hljs-selector-tag">created</span>() &#123;<span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-string">"已创建到内存中"</span>);&#125;,<span class="hljs-selector-tag">mounted</span>() &#123;<span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(<span class="hljs-string">"已挂载到页面中"</span>);&#125;</code></pre><h3 id="2-updated、destroyed"><a href="#2-updated、destroyed" class="headerlink" title="2. updated、destroyed"></a>2. updated、destroyed</h3><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">updated</span><span class="hljs-params">()</span></span>&#123;console.log(<span class="hljs-string">"已更新"</span>)&#125;,<span class="hljs-function"><span class="hljs-title">destroyed</span><span class="hljs-params">()</span></span>&#123;console.log(<span class="hljs-string">"已消亡"</span>)&#125;</code></pre><h2 id="八、Assets"><a href="#八、Assets" class="headerlink" title="八、Assets"></a>八、Assets</h2><p>directives、filters、components</p><h3 id="1-directives"><a href="#1-directives" class="headerlink" title="1. directives"></a>1. directives</h3><p>_官方中文文档：→ <em>[</em>点击这里_](<a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4</a>)</p><ul><li>内置指令： v-text、v-html、v-show、v-if、v-else、v-else-if、v-for、v-on、v-bind</li><li>内置指令：v-model、v-slot、 v-pre、v-cloak、v-once</li><li>Vue 允许使用自定义指令，对普通 DOM 元素进行底层操作，实现代码复用和抽象</li><li>减少 DOM 操作的重复</li></ul><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span> 全局使用Vue.directive(<span class="hljs-string">'greet'</span>,&#123;inserted(el)&#123;  el.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello'</span>))  &#125;&#125;)<span class="hljs-regexp">//</span> 局部使用directives: &#123;greet2: &#123;  inserted(el)&#123;    el.addEventListener(<span class="hljs-string">'click'</span>,<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Hello2'</span>))    &#125;  &#125;&#125;</code></pre><p>直接将指令添加到标签上，即可使用该指令</p><pre><code class="hljs gml">&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-symbol">x</span>&gt;Hello&lt;/<span class="hljs-keyword">div</span>&gt;</code></pre><p><em>详细用法：</em><a href="https://cn.vuejs.org/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0" target="_blank" rel="noopener"><em>点击这里</em></a><br>_</p><h3 id="2-modifer"><a href="#2-modifer" class="headerlink" title="2. modifer"></a>2. modifer</h3><p><em>按键修饰符的文档：</em><a href="https://cn.vuejs.org/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener"><em>点击这里</em></a></p><ul><li>指令可以加修饰符</li><li><a href="#">@click.stop、@click.prevent、@click.stop.prevent</a></li></ul><h3 id="3-sync-修饰符"><a href="#3-sync-修饰符" class="headerlink" title="3. .sync 修饰符"></a>3. .sync 修饰符</h3><ul><li>一块语法糖</li></ul><p>Vue 的规则中</p><ul><li>组件不能修改 props 外部数据</li><li>this.$emit 可以触发事件并传参</li><li>this.$event 可以获取 $emit 的参数</li></ul><p><em>官方中文文档：</em><a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#sync-%E4%BF%AE%E9%A5%B0%E7%AC%A6" target="_blank" rel="noopener"><em>点击这里</em></a></p><h3 id="3-components"><a href="#3-components" class="headerlink" title="3. components"></a>3. components</h3><p>main.js 中</p><pre><code class="hljs javascript"><span class="hljs-comment">// 引入一个组件，方式一</span><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'Vue.vue'</span><span class="hljs-comment">// JS 方式做一个组件</span>Vue.component(&lt;组件名&gt;,&#123;template:<span class="hljs-string">`&lt;页面内容&gt;`</span>&#125;)<span class="hljs-comment">// 使用组件</span><span class="hljs-keyword">new</span> Vue(&#123;components: &#123;&lt;组件名&gt;: &lt;组件&gt;    template:<span class="hljs-string">`&lt;组件名&gt;`</span>&#125;&#125;)</code></pre><h2 id="九、Composititon"><a href="#九、Composititon" class="headerlink" title="九、Composititon"></a>九、Composititon</h2><p>parent、mixins、extends、provide、inject</p><h3 id="1-mixins"><a href="#1-mixins" class="headerlink" title="1. mixins"></a>1. mixins</h3><ul><li>减少 data、methods、钩子的重复</li><li>它很聪明，会自动合并</li><li>log 必须是对象</li></ul><h3 id="2-extends"><a href="#2-extends" class="headerlink" title="2. extends"></a>2. extends</h3><ul><li>Vue 继承扩展</li><li>和 mixins 很像</li><li>const vue2 = Vue.extend()</li></ul><h3 id="3-provide-和-inject"><a href="#3-provide-和-inject" class="headerlink" title="3. provide 和 inject"></a>3. provide 和 inject</h3><ul><li>给子代共享数据，并能够修改</li></ul><h2 id="十、Misc"><a href="#十、Misc" class="headerlink" title="十、Misc"></a>十、Misc</h2><p>name、delimiters、functional、model、inheritAttrs、comments</p><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Webpack - 打包工具</title>
    <link href="/2020/05/04/Webpack%20-%20%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/05/04/Webpack%20-%20%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>Webpack 的相关知识，内容包括简介、安装 Webpack、Webpack 基本配置、Webpack 进阶配置、Webpack 配置汇总、预览。</p><h2 id="一、-简介"><a href="#一、-简介" class="headerlink" title="一、 简介"></a>一、 简介</h2><p>Webpack 是一个模块打包工具</p><p>_官网：→ <em>[</em>点击这里_](<a href="https://webpack.docschina.org/" target="_blank" rel="noopener">https://webpack.docschina.org/</a>)<br>_</p><h3 id="1-简单类比"><a href="#1-简单类比" class="headerlink" title="1. 简单类比"></a>1. 简单类比</h3><p>_<br>Webpack 就像一个没有装修过的“毛坯房”，提供了一个基本的“房子”，满足遮风挡雨的需求，不能直接满足睡觉、写字等需求。</p><ul><li>想睡觉，自己添加床</li><li>想写字，自己添加桌子</li></ul><p>Webpack 内置 babel-loader，能够加载 JS，不能直接加载 HTML、CSS等其他内容。想要有其他需求，通过「loader」和「plugin」做相关配置。</p><ul><li>引入 JS，内置 babel-loader，直接引入</li><li>预览 HTML ，配置 html-webpack-plugin、webpack-dev-server</li><li>引入 CSS，配置 stype-loader、css-loader、mini-css-extract-plugin</li><li>引入 SCSS，配置 sass-loader、data-sass</li><li>引入 LESS，配置 less-loader、less</li><li>引入 Stylus，配置 stylus-loader、stylus</li><li>引入图片，配置 file-loader</li></ul><p>_</p><h2 id="二、安装-Webpack"><a href="#二、安装-Webpack" class="headerlink" title="二、安装 Webpack"></a>二、安装 Webpack</h2><h3 id="1-初始化目录"><a href="#1-初始化目录" class="headerlink" title="1. 初始化目录"></a>1. 初始化目录</h3><p>参数 -y：使用默认初始化</p><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init -y</code></pre><h3 id="2-安装两个包"><a href="#2-安装两个包" class="headerlink" title="2. 安装两个包"></a>2. 安装两个包</h3><p>需要安装两个包，webpack 和 webpack-cli，前者是 webpack，后者是 webpack 命令行工具。</p><p>参数 –dev：将包版本添加到 dev 依赖</p><pre><code class="hljs avrasm">yarn <span class="hljs-keyword">add</span> webpack webpack-<span class="hljs-keyword">cli</span> --dev</code></pre><h3 id="3-三个目录"><a href="#3-三个目录" class="headerlink" title="3. 三个目录"></a>3. 三个目录</h3><p>在本地项目初始化并安装完 Wepack 后，有 3 个目录</p><ol><li><strong>node_modules</strong> 是安装 node 后用来存放用包管理工具下载安装的包的文件夹</li><li>*<em>package.json *</em>包含关于项目的元数据，包括项目名称和说明、程序包版本号和程序所需的依赖列表</li><li>*<em>yarn.lock *</em>存储比 package.json 中的依赖列表的更详细信息</li></ol><p>webpack 命令可以进行对我们做的项目进行打包，它位于 node_modules/.bin/webpack</p><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 以下两种方式均可运行.node_modules<span class="hljs-regexp">/.bin/</span>webpacknpx webpack</code></pre><h2 id="三、Webpack-基本配置"><a href="#三、Webpack-基本配置" class="headerlink" title="三、Webpack 基本配置"></a>三、Webpack 基本配置</h2><p>当我们直接运行 webpack 命令的时候，会报错，这是无法成功的。</p><p>Webpack 是打包工具，我们当然要提前给 Webpack 设置好打包的规则和打包的内容。</p><p>怎么配置？去官网“复制、粘贴”走起。</p><h3 id="1-创建一个配置文件"><a href="#1-创建一个配置文件" class="headerlink" title="1. 创建一个配置文件"></a>1. 创建一个配置文件</h3><p>在根目录创建 webpack.config.js，里面的代码就是打包规则</p><pre><code class="hljs lua">const <span class="hljs-built_in">path</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);module.exports = &#123; entry: <span class="hljs-string">'./src/index.js'</span>,  <span class="hljs-built_in">output</span>: &#123;    filename: <span class="hljs-string">'main.js'</span>,    <span class="hljs-built_in">path</span>: <span class="hljs-built_in">path</span>.resolve(__dirname, <span class="hljs-string">'dist'</span>)  &#125;&#125;;</code></pre><ul><li>entry：入口</li><li>output：出口<ul><li>filename：文件名</li><li>path：路径</li></ul></li></ul><p>打包时运以下命令，其中 config 参数用于指定打包配置，若不写，则默认 webpack.config.js</p><pre><code class="hljs arduino">npx webpack --<span class="hljs-built_in">config</span> webpack.<span class="hljs-built_in">config</span>.js</code></pre><h3 id="2-创建一个-src-目录"><a href="#2-创建一个-src-目录" class="headerlink" title="2. 创建一个 src 目录"></a>2. 创建一个 src 目录</h3><p>在根目录创建 src 目录，里面的文件就是打包内容，我们在里面写一个 index.js 吧</p><pre><code class="hljs 1c">console.<span class="hljs-built_in">log</span>(<span class="hljs-string">"Hello"</span>)</code></pre><h3 id="3-添加一个快捷方式"><a href="#3-添加一个快捷方式" class="headerlink" title="3. 添加一个快捷方式"></a>3. 添加一个快捷方式</h3><p>考虑到用 CLI 这种方式来运行本地的 webpack 并不是特别方便，我们可以设置一个快捷方式来运行</p><pre><code class="hljs 1c"><span class="hljs-string">"scripts"</span>: &#123;<span class="hljs-string">"build"</span>: <span class="hljs-string">"webpack"</span>&#125;</code></pre><h3 id="4-测试一下"><a href="#4-测试一下" class="headerlink" title="4. 测试一下"></a>4. 测试一下</h3><p>运行 webpack 命令，会生成一个 dist 目录，里面就是打包后的文件。</p><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn build</span></code></pre><h2 id="四、Webpack-进阶配置"><a href="#四、Webpack-进阶配置" class="headerlink" title="四、Webpack 进阶配置"></a>四、Webpack 进阶配置</h2><h3 id="1-mode、hash、build"><a href="#1-mode、hash、build" class="headerlink" title="1. mode、hash、build"></a>1. mode、hash、build</h3><p><strong>设置 mode</strong></p><p>Webpack 开发有两种模式，开发模式和生产模式，它们的区别在于开发模式中生成的 HTML 有注释、有段落，生产模式生成的 HTML 去除了段落和注释，体积更小。</p><ul><li>开发预览时，使用开发模式 mode:  ‘development’</li><li>打包时，使用生产模式 mode: ‘production’</li></ul><pre><code class="hljs java">modules.<span class="hljs-keyword">exports</span> = &#123;mode: <span class="hljs-string">'none'</span> / <span class="hljs-string">'development'</span> / <span class="hljs-string">'production'</span>&#125;</code></pre><p><strong>添加 hash</strong></p><p>对于静态页面，我们都希望浏览器能够进行缓存，那样以后进入页面就可以直接使用缓存资源，这里利用 hash 方式修改文件名，以达到缓存目的。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1587732917812-b4499070-3a93-4e28-8e6a-f4bc540efdcb.png#align=left&display=inline&height=220&margin=%5Bobject%20Object%5D&name=image.png&originHeight=524&originWidth=1773&size=122936&status=done&style=none&width=746" srcset="/img/loading.gif" alt="image.png"></p><pre><code class="hljs dts">modules.export = &#123;<span class="hljs-symbol">output:</span> &#123;<span class="hljs-symbol">  filename:</span> main.[contentHash].js  &#125;&#125;</code></pre><p><strong>配置 build</strong><br>**<br>因为使用了给文件添加了 hash，每次生成新的文件，老的文件需要我们手动删除，所以这里重新配置 build。</p><pre><code class="hljs 1c"><span class="hljs-string">"scripts"</span>:&#123;<span class="hljs-string">"build"</span>: <span class="hljs-string">"rm -rf dist &amp;&amp; webpack"</span>&#125;</code></pre><h3 id="2-引入-JS"><a href="#2-引入-JS" class="headerlink" title="2. 引入 JS"></a>2. 引入 JS</h3><p>Webpack 内置了 babel-loader，所以可以直接引用，无需任何配置。</p><pre><code class="hljs xl"><span class="hljs-keyword">import</span> <span class="hljs-string">"./main.js"</span></code></pre><p>main.js 中</p><pre><code class="hljs 1c">console.<span class="hljs-built_in">log</span>('Hi')</code></pre><h3 id="3-引入-HTML"><a href="#3-引入-HTML" class="headerlink" title="3. 引入 HTML"></a>3. 引入 HTML</h3><p><strong>安装 html-webpack-plugin、webpack-dev-server</strong><br>**</p><ul><li>html-webpack-plugin 可以自动生成 HTML</li><li>webpack-dev-server 可以响应式预览 HTML，文件都保存在内存中，使开发变得又快又方便</li></ul><p>**</p><pre><code class="hljs pgsql">yarn <span class="hljs-keyword">add</span> html-webpack-plugin webpack-dev-<span class="hljs-keyword">server</span> <span class="hljs-comment">--dev</span></code></pre><p><strong>配置 html-webpack-plugin，添加 HTML 模板</strong></p><pre><code class="hljs livescript"><span class="hljs-keyword">const</span> HtmlWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'html-webpack-plugin'</span>);modules.<span class="hljs-keyword">export</span> = &#123;plugins:[  <span class="hljs-keyword">new</span> HtmlWebpackPlugin(&#123;    title: <span class="hljs-string">'Hello'</span>，      template: <span class="hljs-string">'./src/assets/index.html'</span>    &#125;)  ]&#125;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"zh-CN"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span> <span class="hljs-attr">htmlWebpackPlugin.options.title</span> %&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app1"</span>&gt;</span>Hi<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    div<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><strong>HTML 预览</strong><br>**<br>直接运行以下命令即可</p><pre><code class="hljs axapta">webpack-dev-<span class="hljs-keyword">server</span></code></pre><p>干脆直接把它添加到快捷方式里面，那样预览起来方便多了</p><pre><code class="hljs avrasm"><span class="hljs-symbol">scripts:</span>&#123;<span class="hljs-string">"serve"</span>: webpack-dev-server&#125;</code></pre><h3 id="4-引入-CSS"><a href="#4-引入-CSS" class="headerlink" title="4. 引入 CSS"></a>4. 引入 CSS</h3><p>引入 CSS 的方式有两种，一种方式是将 CSS 文件打包成 style 标签添加到 HTML 里，另一种方式是将 CSS 抽离成文件。</p><p><strong>方式一：style 标签的形式</strong></p><ul><li>css-loader 把 CSS 转译成 JS 字符串</li><li>style-loader 把转译后的 CSS 转译成 style 标签添加到 HTML中</li></ul><pre><code class="hljs dockerfile">yarn <span class="hljs-keyword">add</span><span class="bash"> css-loader style-loader --dev</span></code></pre><pre><code class="hljs typescript"><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-keyword">module</span>: &#123;    rules: [      &#123;        test: <span class="hljs-regexp">/\.css$/i</span>,        use: [<span class="hljs-string">'style-loader'</span>, <span class="hljs-string">'css-loader'</span>],      &#125;,    ],  &#125;,&#125;;</code></pre><p>main.js 中</p><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">'./style.css'</span></code></pre><p>style.css 中</p><pre><code class="hljs css"><span class="hljs-selector-id">#app1</span>&#123;    <span class="hljs-attribute">color</span>: red;    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;&#125;</code></pre><p><strong>方式二：抽离成 CSS 文件</strong></p><ul><li>mini-css-extract-plugin 把 CSS 抽离成文件<pre><code class="hljs dockerfile">yarn <span class="hljs-keyword">add</span><span class="bash"> mini-css-extract-plugin --dev</span></code></pre><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> MiniCssExtractPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'mini-css-extract-plugin'</span>);<span class="hljs-built_in">module</span>.exports = &#123;  plugins: [<span class="hljs-keyword">new</span> MiniCssExtractPlugin(&#123;  filename: style.[hashContent].css  &#125;)],  <span class="hljs-keyword">module</span>: &#123;    rules: [      &#123;        test: <span class="hljs-regexp">/\.css$/i</span>,        use: [MiniCssExtractPlugin.loader, <span class="hljs-string">'css-loader'</span>],      &#125;,    ],  &#125;,&#125;;</code></pre></li></ul><p>main.js 中</p><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">'./style2.css'</span></code></pre><p>style2.css 中</p><pre><code class="hljs css"><span class="hljs-selector-id">#app1</span>&#123;    <span class="hljs-attribute">background</span>: blue;&#125;</code></pre><p>验证是否成功，运行以下命令，然后查看 dist 目录</p><pre><code class="hljs ebnf"><span class="hljs-attribute">yarn build</span></code></pre><h3 id="5-引入-SCSS"><a href="#5-引入-SCSS" class="headerlink" title="5. 引入 SCSS"></a>5. 引入 SCSS</h3><p><strong>安装 sass-loader 和 dart-sass</strong><br>**</p><ul><li>sass-loader 依赖于 dart-sass / node-sass，优先使用 dart-sass</li><li>sass-loader 将 SCSS 转译成 CSS</li></ul><pre><code class="hljs dockerfile">yarn <span class="hljs-keyword">add</span><span class="bash"> sass-loader dart-sass --dev</span></code></pre><pre><code class="hljs dts">module.exports = &#123;<span class="hljs-symbol">    module:</span> &#123;<span class="hljs-symbol">        rules:</span> [            &#123;<span class="hljs-symbol">                test:</span> /\.scss$/i,<span class="hljs-symbol">                use:</span> [                    <span class="hljs-string">"style-loader"</span>,                    <span class="hljs-string">"css-loader"</span>,                    &#123;<span class="hljs-symbol">                        loader:</span> <span class="hljs-string">"sass-loader"</span>,<span class="hljs-symbol">                        options:</span> &#123;<span class="hljs-symbol">                            implementation:</span> require(<span class="hljs-string">"dart-sass"</span>)                        &#125;                    &#125;                ]            &#125;        ],    &#125;,&#125;;</code></pre><p>main.js 中</p><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">'style.scss'</span></code></pre><p>style.scss 中</p><pre><code class="hljs mel">$app2-<span class="hljs-keyword">color</span>:blue;#app2 &#123;    <span class="hljs-keyword">color</span>: $app2-<span class="hljs-keyword">color</span>;&#125;</code></pre><h3 id="6-引入-LESS"><a href="#6-引入-LESS" class="headerlink" title="6. 引入 LESS"></a>6. 引入 LESS</h3><p><strong>安装 less-loader 和 less</strong><br>**</p><pre><code class="hljs cmake">yarn add <span class="hljs-keyword">less</span>-loader <span class="hljs-keyword">less</span> --dev</code></pre><pre><code class="hljs typescript"><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-keyword">module</span>: &#123;    rules: [      &#123;        test: <span class="hljs-regexp">/\.less$/</span>,        loader: [<span class="hljs-string">'style-loader'</span>, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'less-loader'</span>,]      &#125;,    ],  &#125;,&#125;;</code></pre><p>main.js 中</p><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">'./style.less'</span></code></pre><p>style.less 中</p><pre><code class="hljs less"><span class="hljs-variable">@color:</span> red;<span class="hljs-selector-id">#app2</span>&#123;    <span class="hljs-attribute">background</span>: <span class="hljs-variable">@color</span>;&#125;</code></pre><h3 id="7-引入-Stylus"><a href="#7-引入-Stylus" class="headerlink" title="7. 引入 Stylus"></a>7. 引入 Stylus</h3><p><strong>安装 stylus-loader 和 stylus</strong><br>**</p><pre><code class="hljs dockerfile">yarn <span class="hljs-keyword">add</span><span class="bash"> stylus-loader stylus --dev</span></code></pre><pre><code class="hljs typescript"><span class="hljs-built_in">module</span>.exports = &#123;  <span class="hljs-keyword">module</span>: &#123;    rules: [      &#123;        test: <span class="hljs-regexp">/\.less$/</span>,        loader: [<span class="hljs-string">'style-loader'</span>, <span class="hljs-string">'css-loader'</span>, <span class="hljs-string">'stylus-loader'</span>,]      &#125;,    ],  &#125;,&#125;;</code></pre><p>main.js 中</p><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">'./style.styl'</span></code></pre><p>style.styl 中</p><pre><code class="hljs hsp">f = <span class="hljs-number">40</span>px<span class="hljs-comment">;</span><span class="hljs-meta">#app2&#123;</span>    <span class="hljs-keyword">font</span>-size: f&#125;</code></pre><h3 id="8-引入-图片"><a href="#8-引入-图片" class="headerlink" title="8. 引入 图片"></a>8. 引入 图片</h3><p><strong>安装 file-loader</strong><br>**</p><ul><li>file-loader 的作用是把文件转换成文件路径</li></ul><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">add</span> <span class="hljs-built_in">file</span>-loader <span class="hljs-comment">--dev</span></code></pre><pre><code class="hljs openscad"><span class="hljs-function"><span class="hljs-keyword">module</span>.<span class="hljs-title">exports</span> =</span> &#123;  <span class="hljs-function"><span class="hljs-keyword">module</span>: &#123;</span>    rules: [      &#123;        test: /\.(png|svg|jpg|gif)$/,        <span class="hljs-keyword">use</span>: ['file-loader',],      &#125;,    ],  &#125;,&#125;;</code></pre><p>assets 目录放入一张图片</p><pre><code class="hljs awk">src<span class="hljs-regexp">/assets/</span>dog.jpg</code></pre><p>main.js 中</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> jpg <span class="hljs-keyword">from</span> <span class="hljs-string">'./assets/dog.jpg'</span><span class="hljs-keyword">let</span> div = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">'#app3'</span>)div.innerHTML = <span class="hljs-string">`</span><span class="hljs-string">    &lt;img src="<span class="hljs-subst">$&#123;jpg&#125;</span>"&gt;</span><span class="hljs-string">`</span></code></pre><h3 id="9-掉坑操作"><a href="#9-掉坑操作" class="headerlink" title="9. 掉坑操作"></a>9. 掉坑操作</h3><ul><li><strong>掉坑 1：</strong>引入 HTML 时，总是出错，我在 ‘&lt;’ 和 ‘%’ 之间加了空格</li><li><strong>启示 1：</strong>代码复制粘贴要一模一样，不要多空格，不要少空格<pre><code class="hljs mel">&lt;%= htmlWebpackPlugin.options.title %&gt;</code></pre></li></ul><ul><li><strong>掉坑 2：</strong>引入 CSS 时，总是出错，重启 serve 就好了</li><li><strong>启示 2：</strong>安装新 loader 后，出错了重启一下 serve 再看看结果</li></ul><ul><li><strong>掉坑 3：</strong>配置 dart-sass，总是出错，报错说没有安装 node-sass，把 dart-sass 卸载再重装又好了</li><li><strong>启示 3：</strong>如果出现莫名错误，把包卸载重装试试</li></ul><h2 id="五、Webpack-配置汇总"><a href="#五、Webpack-配置汇总" class="headerlink" title="五、Webpack 配置汇总"></a>五、Webpack 配置汇总</h2><h3 id="1-package-json"><a href="#1-package-json" class="headerlink" title="1. package.json"></a>1. package.json</h3><p><a href="https://github.com/mcx2020/webpack-demo-1/blob/master/package.json" target="_blank" rel="noopener">https://github.com/mcx2020/webpack-demo-1/blob/master/package.json</a></p><h3 id="2-webpack-config-js"><a href="#2-webpack-config-js" class="headerlink" title="2. webpack.config.js"></a>2. webpack.config.js</h3><p><a href="https://github.com/mcx2020/webpack-demo-1/blob/master/webpack.config.js" target="_blank" rel="noopener">https://github.com/mcx2020/webpack-demo-1/blob/master/webpack.config.js</a></p><h3 id="3-src-目录"><a href="#3-src-目录" class="headerlink" title="3. src 目录"></a>3. src 目录</h3><p><a href="https://github.com/mcx2020/webpack-demo-1/tree/master/src" target="_blank" rel="noopener">https://github.com/mcx2020/webpack-demo-1/tree/master/src</a></p><h3 id="4-src-assets-目录"><a href="#4-src-assets-目录" class="headerlink" title="4. src/assets 目录"></a>4. src/assets 目录</h3><p><a href="https://github.com/mcx2020/webpack-demo-1/tree/master/src/assets" target="_blank" rel="noopener">https://github.com/mcx2020/webpack-demo-1/tree/master/src/assets</a></p><h2 id="六、预览"><a href="#六、预览" class="headerlink" title="六、预览"></a>六、预览</h2><p><a href="https://machaoxue.xyz/webpack-demo-1/dist/" target="_blank" rel="noopener">https://mcx2020.github.io/webpack-demo-1/dist/</a></p><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MVC - 设计模式</title>
    <link href="/2020/05/04/MVC%20-%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/05/04/MVC%20-%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>MVC 的相关知识，内容包括简介。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>MVC 是一种设计模式，使用这种模式写代码会让结构更加清晰</p><p><em>参看一篇博客：</em><a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener"><em>点击这里</em></a></p><p>MVC 的思想是将代码分成三个类，M、V、C</p><ul><li>M（Model）– 数据相关</li><li>V（View）– 视图相关</li><li>C（Controller）– 控制相关</li></ul><p>关于 MVC，它是一种模糊的概念，只能心领神会，网上有很多观点和讨论</p><p>（完）</p><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Promise - 异步编程</title>
    <link href="/2020/05/03/Promise%20-%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/05/03/Promise%20-%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Promise 的相关知识，内容包括简介、用法。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>「异步 + 回调」能够写出异步任务，但是这样的组合，当出现很多回调的时候，就出现了“回调地狱”</p><p>前端结合 Promise 和 JS，制定了 Promise 规范，详细描述了 Promise 的原理和使用方法</p><h2 id="二、用法"><a href="#二、用法" class="headerlink" title="二、用法"></a>二、用法</h2><p>在异步代码中，return 一个 Promise 的实例</p><pre><code class="hljs lisp">return new Promise((<span class="hljs-name">resolve</span>,reject)=&#123;// 任务成功，调用 resolve(<span class="hljs-name">result</span>)  // 任务失败，调用 reject(<span class="hljs-name">error</span>)&#125;)</code></pre><ul><li>.then(success,fail) 传入成功函数和失败函数</li></ul><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>异步 - 概念</title>
    <link href="/2020/05/03/%E5%BC%82%E6%AD%A5%20-%20%E6%A6%82%E5%BF%B5/"/>
    <url>/2020/05/03/%E5%BC%82%E6%AD%A5%20-%20%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>异步的相关知识，内容包括简介、用途。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li>Javascript语言的执行环境是”单线程”</li><li>执行模式分成两种：同步（Synchronous）和异步（Asynchronous）</li></ul><p><strong>异步常常与回调配合</strong></p><ul><li>“同步模式”是后一个任务等待前一个任务结束，然后再执行</li><li>“异步模式”是前一个任务结束后，不是执行后一个任务，而是执行回调函数</li></ul><h2 id="二、用途"><a href="#二、用途" class="headerlink" title="二、用途"></a>二、用途</h2><p>在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，比如 AJSAX 操作</p><p>以下函数或对象中的所写代码都是异步执行的</p><ul><li>setTimeout</li><li>AJAX（即 XMLHttpRequest）</li><li>addEventListener</li><li>Vue 中 watch 监听数据是异步的</li><li>React 中 setState 更新到 UI 是异步的</li></ul><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>回调 - 概念</title>
    <link href="/2020/05/03/%E5%9B%9E%E8%B0%83%20-%20%E6%A6%82%E5%BF%B5/"/>
    <url>/2020/05/03/%E5%9B%9E%E8%B0%83%20-%20%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>回调的相关知识，内容包括简介、举例、两种回调。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>回调全称叫做“回头调一下函数”</p><p><strong>MDN 中回调函数的说法</strong></p><blockquote><p>被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为回调函数</p></blockquote><p><strong>维基百科中的回调函数的说法</strong></p><blockquote><p>在计算机程序设计中，回调函数，或简称回调（Callback 即call then back 被主函数调用运算后会返回主函数），是指通过函数参数传递到其它代码的，某一块可执行代码的引用。这一设计允许了底层代码调用在高层定义的子程序</p></blockquote><p>这说的是人话嘛，我们简单理解一下</p><ul><li>回调函数不是我们直接使用的</li><li>回调函数是给其他地方用的</li></ul><h2 id="二、举例"><a href="#二、举例" class="headerlink" title="二、举例"></a>二、举例</h2><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> f = <span class="hljs-function">(<span class="hljs-params">x</span>)=&gt;</span>&#123;<span class="hljs-built_in">console</span>.log(x)&#125;<span class="hljs-keyword">let</span> f2 = <span class="hljs-function">(<span class="hljs-params">callback</span>)=&gt;</span>&#123;<span class="hljs-keyword">let</span> a = <span class="hljs-string">"Hello"</span>  callback(a)&#125;f2(f)</code></pre><ul><li>f 是一个回调函数</li></ul><p>再次理解一下，f 在声明之后，我没有去直接调用它，而是传给 f2，f2调用了 f，f2 给 f 传了参数</p><h2 id="三、两种回调"><a href="#三、两种回调" class="headerlink" title="三、两种回调"></a>三、两种回调</h2><p><strong>异步回调</strong></p><pre><code class="hljs stylus"><span class="hljs-comment">// f2 是一个回调函数，f3 执行完后再执行很费时的代码，再调用 f2</span><span class="hljs-function"><span class="hljs-title">setTimeout</span><span class="hljs-params">()</span></span>&#123;  <span class="hljs-comment">// 很费时的代码</span>  f2()&#125;<span class="hljs-function"><span class="hljs-title">f3</span><span class="hljs-params">()</span></span></code></pre><p><strong>同步回调</strong></p><pre><code class="hljs smali">// console.log 是一个回调函数，是同步回调let<span class="hljs-built_in"> array </span>= [1,2,3,4,5]array.forEach(console.log)  // 1 2 3 4 5</code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>闭包 - 概念</title>
    <link href="/2020/05/02/%E9%97%AD%E5%8C%85%20-%20%E6%A6%82%E5%BF%B5/"/>
    <url>/2020/05/02/%E9%97%AD%E5%8C%85%20-%20%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<p>闭包的相关知识，内容包括简介、用途。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li>在 JavaScript 语言中，闭包是由函数和与其相关的参照环境组合而成的实体</li><li>即函数使用了外部的变量</li></ul><p><strong>关键字</strong></p><ul><li>函数</li><li>环境</li></ul><h2 id="二、用途"><a href="#二、用途" class="headerlink" title="二、用途"></a>二、用途</h2><ul><li>隐藏局部变量，暴露操作函数</li></ul><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">let</span> n = <span class="hljs-number">100</span>  <span class="hljs-keyword">let</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;  n += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> n  &#125;  <span class="hljs-keyword">return</span> f&#125;<span class="hljs-keyword">let</span> add2 = add()add2()  <span class="hljs-comment">// 101</span>add2()  <span class="hljs-comment">// 102</span></code></pre><p>闭包并不会造成内存泄露，真实原因是 JS 引擎的实现有问题</p><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery - JS 操作</title>
    <link href="/2020/05/01/jQuery%20-%20DOM%20%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/05/01/jQuery%20-%20DOM%20%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>jQuery 的相关知识，内容包括简介、jQuery 的特点、获取网页元素、取值和赋值、创建插入和移动元素、复制和删除元素、常用事件。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>jQuery 是对 DOM 操作的封装。由于 DOM 提供的原生 API 太难用啦，于是许多程序员经过多年摸索，创造了一套操作 DOM 更加便捷的代码，这套代码特别经典，后来命名为 jQuery，流传到现在。</p><h2 id="二、jQuery-的特点"><a href="#二、jQuery-的特点" class="headerlink" title="二、jQuery 的特点"></a>二、jQuery 的特点</h2><p>jQuery 是一个函数，jQuery() 能够接收不同的参数返回不同的结果，专业的说法这个就叫“重载”。</p><p>事实上它返回了一个 jQuery 对象（它是 jQuery 函数创造出来的，暂且这么称呼），对象下有很多方法可以使用，使用方法后还是返回一个对象，依旧有很多方法可是使用，专业的说法这个叫“链式操作”。</p><p>此处摘选一下阮一峰老师写的文章《jQuery设计思想》（有删减）</p><ol><li>选择网页元素：选择某个网页元素，然后对其进行某种操作</li><li>改变结果集：提供各种强大的过滤器，对结果集进行筛选，缩小结果集</li><li>链式操作：最终选中网页元素以后，可以对它进行一系列操作，并且所有操作可以连接在一起</li><li>元素的取值和赋值：使用同一个函数来完成取值和赋值，即“取值器”与“赋值器”合一</li><li>元素的移动：提供两组方法来操作元素在网页中的位置移动</li><li>工具方法：除了对选中的元素进行操作以外，还提供一些与元素无关的工具方法</li><li>事件操作：把事件直接绑定在网页元素上</li></ol><h2 id="三、获取网页元素"><a href="#三、获取网页元素" class="headerlink" title="三、获取网页元素"></a>三、获取网页元素</h2><p>将一个选择表达式放进构造函数 jQuery()（简写为 $），得到被选中的元素</p><pre><code class="hljs bash"><span class="hljs-built_in">let</span> $ = jQuery</code></pre><p>获取获取元素的常用方法</p><pre><code class="hljs reasonml"><span class="hljs-constructor">$(<span class="hljs-params">document</span>)</span>  <span class="hljs-comment">// 获取整个文档</span><span class="hljs-constructor">$('#<span class="hljs-params">myId</span>')</span>  <span class="hljs-comment">// 获取 id 为 myId 的元素</span><span class="hljs-constructor">$('<span class="hljs-params">div</span>.<span class="hljs-params">myClass</span>')</span>  <span class="hljs-comment">// 获取 class 为 myClass 的 div 元素</span><span class="hljs-constructor">$('<span class="hljs-params">input</span>[<span class="hljs-params">name</span>=<span class="hljs-params">first</span>]')</span>  <span class="hljs-comment">// 获取 name 属性为 first 的 input 元素</span><span class="hljs-constructor">$('<span class="hljs-params">div</span>')</span>.first<span class="hljs-literal">()</span>  <span class="hljs-comment">// 获取第 1 div 元素</span><span class="hljs-constructor">$('<span class="hljs-params">div</span>')</span>.eq(<span class="hljs-number">5</span>)  <span class="hljs-comment">// 获取第 6 个 div 元素</span><span class="hljs-constructor">$('<span class="hljs-params">div</span>')</span>.index<span class="hljs-literal">()</span>  <span class="hljs-comment">// 查询 自己是第几个 div 元素</span></code></pre><p>获取父元素、子元素、同级元素</p><pre><code class="hljs mel">$(<span class="hljs-string">'div'</span>).<span class="hljs-keyword">parent</span>()  <span class="hljs-comment">// 获取父元素</span>$(<span class="hljs-string">'div'</span>).children()  <span class="hljs-comment">// 获取子元素</span>$(<span class="hljs-string">'div'</span>).next()  <span class="hljs-comment">// 获取下一个元素</span>$(<span class="hljs-string">'div'</span>).siblings()  <span class="hljs-comment">// 获取同级节点</span></code></pre><h2 id="四、取值和赋值"><a href="#四、取值和赋值" class="headerlink" title="四、取值和赋值"></a>四、取值和赋值</h2><pre><code class="hljs mel">$(<span class="hljs-string">'div'</span>).attr(&lt;<span class="hljs-string">'class'</span>,<span class="hljs-string">'testing'</span>&gt;)  <span class="hljs-comment">// 取出或设置属性</span>$(<span class="hljs-string">'div'</span>).<span class="hljs-keyword">text</span>(&lt;<span class="hljs-string">'测试'</span>&gt;)  <span class="hljs-comment">// 取出或设置文本</span></code></pre><h2 id="五、创建、插入和移动元素"><a href="#五、创建、插入和移动元素" class="headerlink" title="五、创建、插入和移动元素"></a>五、创建、插入和移动元素</h2><pre><code class="hljs jboss-cli">$<span class="hljs-params">('&lt;p&gt;Hello&lt;/p&gt;')</span>  <span class="hljs-string">//</span> 创建元素<span class="hljs-string">.insertAfter</span><span class="hljs-params">()</span> 和 <span class="hljs-string">.after</span><span class="hljs-params">()</span>  <span class="hljs-string">//</span> 插入到同级元素后面<span class="hljs-string">.insertBefore</span><span class="hljs-params">()</span> 和 <span class="hljs-string">.before</span><span class="hljs-params">()</span>  <span class="hljs-string">//</span> 插入到同级元素前面<span class="hljs-string">.appendTo</span><span class="hljs-params">()</span> 和 <span class="hljs-string">.append</span><span class="hljs-params">()</span>  <span class="hljs-string">//</span> 插入到子元素后面<span class="hljs-string">.prependTo</span><span class="hljs-params">()</span> 和 <span class="hljs-string">.prepend</span><span class="hljs-params">()</span>  <span class="hljs-string">//</span> 插入到子元素前面</code></pre><h2 id="六、复制和删除元素"><a href="#六、复制和删除元素" class="headerlink" title="六、复制和删除元素"></a>六、复制和删除元素</h2><pre><code class="hljs jboss-cli"><span class="hljs-string">.clone</span><span class="hljs-params">()</span>  <span class="hljs-string">//</span> 复制元素<span class="hljs-string">.remove</span><span class="hljs-params">()</span>  <span class="hljs-string">//</span> 删除元素</code></pre><h2 id="七、常用事件"><a href="#七、常用事件" class="headerlink" title="七、常用事件"></a>七、常用事件</h2><pre><code class="hljs gcode">.click<span class="hljs-comment">()</span>  <span class="hljs-comment">// 点击事件</span>.hover<span class="hljs-comment">()</span>  <span class="hljs-comment">// 鼠标悬停事件</span></code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DOM - JS 操作</title>
    <link href="/2020/05/01/DOM%20-%20JS%20%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/05/01/DOM%20-%20JS%20%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>DOM 的相关知识，内容包括简介、获取网页元素、节点之增、节点之删、节点之改、节点之查。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>DOM 是 JavaScript 操作网页的接口，全称是“Document Object Model”。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行“增删改查”。浏览器根据 DOM 模型，将结构化文档解析成一系列的节点组成 DOM Tree。所有的节点和最终的树状结构，都有规范的对外接口。</p><p>DOM 只一个接口规范，它不是 JavaScript 语法的一部分，但是 DOM 操作是 JavaScript 最常见的任务，离开了 DOM，JavaScript 就无法控制网页了。</p><h2 id="二、获取网页元素"><a href="#二、获取网页元素" class="headerlink" title="二、获取网页元素"></a>二、获取网页元素</h2><p>假设 index.html 中 body 标签下有以下这两个标签</p><pre><code class="hljs angelscript">&lt;div id = <span class="hljs-string">'test1'</span> <span class="hljs-keyword">class</span>="<span class="hljs-symbol">testing</span>"&gt;测试<span class="hljs-symbol">1</span>&lt;/<span class="hljs-symbol">div</span>&gt;&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">id</span> = '<span class="hljs-symbol">test2</span>' <span class="hljs-symbol">class</span>="<span class="hljs-symbol">testing</span>"&gt;测试<span class="hljs-symbol">2</span>&lt;/<span class="hljs-symbol">div</span>&gt;</code></pre><p>四种方式获取元素</p><pre><code class="hljs dart">test1 <span class="hljs-comment">// id 直接获取元素</span><span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">'#test1'</span>)  <span class="hljs-comment">// 通过 id 获取元素</span><span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">'.testing'</span>)  <span class="hljs-comment">// 通过 class 获取元素</span><span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">'.testing'</span>)  <span class="hljs-comment">// 通过 class 获取元素，得到有序序列</span></code></pre><p>获取特定元素</p><pre><code class="hljs dart"><span class="hljs-built_in">document</span>.documentElement  <span class="hljs-comment">// 获取 html 元素</span><span class="hljs-built_in">document</span>.head  <span class="hljs-comment">// 获取 head 元素</span><span class="hljs-built_in">document</span>.body  <span class="hljs-comment">// 获取 body 元素</span><span class="hljs-built_in">document</span>.all  <span class="hljs-comment">// 获取所有元素</span><span class="hljs-built_in">window</span>  <span class="hljs-comment">// 获取窗口，不是获取元素</span></code></pre><h2 id="三、节点之增"><a href="#三、节点之增" class="headerlink" title="三、节点之增"></a>三、节点之增</h2><p>创建元素，添加 id 属性，添加 class 属性，添加文本，将元素插入到网页</p><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> div3 = document.create<span class="hljs-constructor">Element('<span class="hljs-params">div</span>')</span>div3.set<span class="hljs-constructor">Attribute('<span class="hljs-params">id</span>','<span class="hljs-params">test3</span>')</span>div3.set<span class="hljs-constructor">Attribute('<span class="hljs-params">class</span>','<span class="hljs-params">testing</span>')</span>div3.textContent = '测试<span class="hljs-number">3</span>'<span class="hljs-keyword">let</span> div2 = document.query<span class="hljs-constructor">Selector('#<span class="hljs-params">test2</span>')</span>document.body.insert<span class="hljs-constructor">Before(<span class="hljs-params">div3</span>,<span class="hljs-params">div2</span>.<span class="hljs-params">nextSibling</span>)</span></code></pre><h2 id="四、节点之删"><a href="#四、节点之删" class="headerlink" title="四、节点之删"></a>四、节点之删</h2><p>删除 id 属性，删除 class 属性，删除文本，将元素从网页中删除</p><pre><code class="hljs routeros">div3.removeAttribute(<span class="hljs-string">'id'</span>)div3.removeAttribute(<span class="hljs-string">'class'</span>)div3.textContent = <span class="hljs-string">''</span>div3.<span class="hljs-builtin-name">remove</span>()</code></pre><h2 id="五、节点之改"><a href="#五、节点之改" class="headerlink" title="五、节点之改"></a>五、节点之改</h2><p>修改 id 属性，修改 class 属性，修改 文本</p><pre><code class="hljs stylus">div2<span class="hljs-selector-class">.id</span> = <span class="hljs-string">'test22'</span>div2<span class="hljs-selector-class">.className</span> = <span class="hljs-string">'testing22'</span>div2<span class="hljs-selector-class">.classList</span>.add(<span class="hljs-string">'newTest'</span>)div2<span class="hljs-selector-class">.textContent</span> = <span class="hljs-string">'测试22'</span></code></pre><h2 id="六、节点之查"><a href="#六、节点之查" class="headerlink" title="六、节点之查"></a>六、节点之查</h2><p>查父节点，查子节点（全部、第一个、最后一个子节点），查同级节点（上一个、下一个同级节点）</p><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> body = <span class="hljs-built_in">document</span>.body<span class="hljs-built_in">console</span>.log(div2.parentNode)  <span class="hljs-comment">// 查看父节点</span><span class="hljs-built_in">console</span>.log(body.children)  <span class="hljs-comment">// 查看全部子节点（不包含文本节点）</span><span class="hljs-built_in">console</span>.log(body.firstChild)  <span class="hljs-comment">// 查看第一个子节点（包含文本节点）</span><span class="hljs-built_in">console</span>.log(body.lastChild)  <span class="hljs-comment">// 查看最后一个子节点（包含文本节点）</span><span class="hljs-built_in">console</span>.log(div2.previousSibling)  <span class="hljs-comment">// 查看上一个同级节点（包含文本节点）</span><span class="hljs-built_in">console</span>.log(div2.nextSibling)  <span class="hljs-comment">// 查看下一个同级节点（包含文本节点）</span></code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AJAX - JS Core</title>
    <link href="/2020/04/30/AJAX%20-%20JS%20Core/"/>
    <url>/2020/04/30/AJAX%20-%20JS%20Core/</url>
    
    <content type="html"><![CDATA[<p>AJAX 的相关知识，内容包括简介、作用、用法、window.JSON。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>AJAX 全名是“Async JavaScript and XML”，主要内容为用 JavaScript 发请求和收响应</p><ul><li>AJAX 是浏览器的功能</li><li>浏览器可以发请求，收响应</li><li>它在 window 上加了一个 XMLHttpRequest 函数</li><li>用这个构造函数（类）可以构造一个对象</li></ul><p>目前前端更流行使用 axios 发送 AJAX</p><h2 id="二、作用"><a href="#二、作用" class="headerlink" title="二、作用"></a>二、作用</h2><p>AJAX 让我们可以把页面拆成各个不同的部分</p><ul><li>不必一开始把请求全做了，它使得请求更灵活</li><li>可以在用户点击的时候请求这个部分</li><li>可以做到轻量级的请求</li></ul><h2 id="三、用法"><a href="#三、用法" class="headerlink" title="三、用法"></a>三、用法</h2><p>可以使用 AJAX 加载不同内容，步骤如下</p><ol><li>创建 HttpRequest 对象（全称是 XMLHttpRequest）</li><li>调用对象的 open 方法</li><li>监听对象的 onreadystatechange 事件</li><li>调用对象的 send 方法（发送请求）</li></ol><pre><code class="hljs vbscript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">request</span> = <span class="hljs-keyword">new</span> XMLHttpRequest();<span class="hljs-built_in">request</span>.open(<span class="hljs-string">"GET"</span>, <span class="hljs-string">"/5.json"</span>);<span class="hljs-built_in">request</span>.onreadystatechange = () =&gt; &#123;  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">request</span>.readyState === <span class="hljs-number">4</span>) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">request</span>.status &gt;= <span class="hljs-number">200</span> &amp;&amp; <span class="hljs-built_in">request</span>.status &lt; <span class="hljs-number">300</span>) &#123;      <span class="hljs-keyword">const</span> object = JSON.parse(<span class="hljs-built_in">request</span>.<span class="hljs-built_in">response</span>);      myName.textContent = object.name;    &#125;  &#125;&#125;;<span class="hljs-built_in">request</span>.send();</code></pre><h2 id="四、window-JSON"><a href="#四、window-JSON" class="headerlink" title="四、window.JSON"></a>四、window.JSON</h2><p>window 下挂一个 JSON 对象，其下的两个函数用做数据类型转换</p><ul><li>JSON.parse  将 JSON 字符串转为 JavaScript 数据</li><li>JSON.stringify  将 JavaScript 数据转为 JSON 字符串</li></ul><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>this - JS Core</title>
    <link href="/2020/04/30/this%20-%20JS%20Core/"/>
    <url>/2020/04/30/this%20-%20JS%20Core/</url>
    
    <content type="html"><![CDATA[<p>this 的相关知识，内容包括函数中的 this、类中的 this、博客参考。</p><h2 id="一、函数中的-this"><a href="#一、函数中的-this" class="headerlink" title="一、函数中的 this"></a>一、函数中的 this</h2><ul><li>this 是什么？一般是实例对象</li><li>怎么用？结合语境灵活运用</li></ul><h3 id="1-普通函数与-this"><a href="#1-普通函数与-this" class="headerlink" title="1. 普通函数与 this"></a>1. 普通函数与 this</h3><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>&#125;<span class="hljs-keyword">let</span> object = &#123;n:<span class="hljs-number">0</span>&#125;<span class="hljs-built_in">console</span>.dir(f.call())  <span class="hljs-comment">// window ———— Window 的实例</span><span class="hljs-built_in">console</span>.dir(f.call(object))  <span class="hljs-comment">// object ———— Object 的实例</span></code></pre><p><strong>记住这两条！！！</strong></p><ul><li>函数只是函数，具体 this 是什么，要看传给它的 this 是什么</li><li>当传递的 this 为空时，this 默认指向 window</li></ul><h3 id="2-箭头函数与-this"><a href="#2-箭头函数与-this" class="headerlink" title="2. 箭头函数与 this"></a>2. 箭头函数与 this</h3><ul><li>箭头函数里是没有 this 的，因为它不接受 this 参数，它油盐不进</li></ul><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> object2 = &#123;n:<span class="hljs-number">0</span>,  f2:<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>  &#125;,  f3()&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>  &#125;&#125;<span class="hljs-built_in">console</span>.log(object2.f2())  <span class="hljs-comment">// window ———— Window 的实例</span><span class="hljs-built_in">console</span>.log(object2.f3())  <span class="hljs-comment">// object2 ———— Object 的实例</span></code></pre><p><strong>分析：</strong></p><ul><li>在最外部，this 的指向为 window</li><li>object2.f2() 时，object2 传给它新 this，f2() 油盐不进，因此 this 还是指向 window</li><li>object2.f3() 时，object2 传给它新 this，f2() 接受了新 this，此时 this 指向 object2</li></ul><h3 id="3-算清楚-this"><a href="#3-算清楚-this" class="headerlink" title="3. 算清楚 this"></a>3. 算清楚 this</h3><p>this 是跟着函数的“语境”变化的，想要清楚 this 的指向一步一步推，用完整写法 .bind()，把函数传参搞清楚，这样一定能搞定。</p><h3 id="4-箭头函数与-this-配合"><a href="#4-箭头函数与-this-配合" class="headerlink" title="4. 箭头函数与 this 配合"></a>4. 箭头函数与 this 配合</h3><ol><li>()=&gt;{f()}</li><li>f</li></ol><p>方式一和方式二直接或间接调用函数 f，当满足以下条件时，使用方式一更好</p><ul><li>这个函数是给外部调用的</li><li>f 函数里面用到了 this</li></ul><p>原因是当外部函数调用函数时会传入一个 this，如果 f 函数里面有 this，会把里面的旧 this 换成 新 this</p><ul><li>普通函数会接受 this 参数，改变 this 指向</li><li>箭头函数不接受 this 参数，外部函数传给它的 this，它假装没看见</li></ul><h2 id="二、类中的-this"><a href="#二、类中的-this" class="headerlink" title="二、类中的 this"></a>二、类中的 this</h2><h3 id="1-定义一个类"><a href="#1-定义一个类" class="headerlink" title="1. 定义一个类"></a>1. 定义一个类</h3><ul><li>定义类的时候，里面必须要写一个「构造函数」—— constructor</li><li>构造函数中的 this 指向类的「实例」</li><li>我们在构造函数里把属性挂到创建的「实例」上面</li></ul><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reactangle</span></span>&#123;  <span class="hljs-keyword">constructor</span>(length,width)&#123;    <span class="hljs-keyword">this</span>.length = length    <span class="hljs-keyword">this</span>.width = width    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">"reactangle"</span>  &#125;  area()&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.length*<span class="hljs-keyword">this</span>.width  &#125;  perimeter()&#123;    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.length + <span class="hljs-keyword">this</span>.width)*<span class="hljs-number">2</span>  &#125;&#125;let reactangle = new Reactangle(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)console.dir(reactangle)</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1588151560837-a696670b-de0c-4e00-af31-5f1f6e270a6f.png#align=left&display=inline&height=183&margin=%5Bobject%20Object%5D&name=image.png&originHeight=187&originWidth=477&size=9523&status=done&style=none&width=467" srcset="/img/loading.gif" alt="image.png"></p><ul><li>new 命令的作用是执行构造函数，并返回一个实例对象</li><li>在构造函数外部的函数就是类的「方法」，它没有挂在实例上</li></ul><h3 id="2-类中的函数"><a href="#2-类中的函数" class="headerlink" title="2. 类中的函数"></a>2. 类中的函数</h3><p>把「方法」挂在实例上也是可以的，把函数写在「构造函数」里</p><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reactangle</span></span>&#123;  <span class="hljs-keyword">constructor</span>(length,width)&#123;    <span class="hljs-keyword">this</span>.length = length    <span class="hljs-keyword">this</span>.width = width    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">"reactangle"</span>    <span class="hljs-keyword">this</span>.area = ()=&gt;&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.length*<span class="hljs-keyword">this</span>.width    &#125;    <span class="hljs-keyword">this</span>.perimeter = ()=&gt;&#123;    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.length + <span class="hljs-keyword">this</span>.width)*<span class="hljs-number">2</span>    &#125;  &#125;&#125;let reactangle = new Reactangle(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)console.dir(reactangle)</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1588151678992-32888baa-d4ef-48e2-9524-1001290450e6.png#align=left&display=inline&height=199&margin=%5Bobject%20Object%5D&name=image.png&originHeight=185&originWidth=438&size=8763&status=done&style=none&width=471" srcset="/img/loading.gif" alt="image.png"></p><h3 id="3-另一种函数写法"><a href="#3-另一种函数写法" class="headerlink" title="3. 另一种函数写法"></a>3. 另一种函数写法</h3><p>把函数写到构造函数外部，但是能够把它挂到「实例」上</p><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reactangle</span></span>&#123;  <span class="hljs-keyword">constructor</span>(length,width)&#123;    <span class="hljs-keyword">this</span>.length = length    <span class="hljs-keyword">this</span>.width = width    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">"reactangle"</span>  &#125;area = ()=&gt;&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.length*<span class="hljs-keyword">this</span>.width  &#125;  perimeter = ()=&gt;&#123;    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.length + <span class="hljs-keyword">this</span>.width)*<span class="hljs-number">2</span>  &#125;&#125;let reactangle = new Reactangle(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)console.dir(reactangle)</code></pre><h2 id="三、-博客参考"><a href="#三、-博客参考" class="headerlink" title="三、 博客参考"></a>三、 博客参考</h2><p><em>《JavaScript 的 this 原理》—— 阮一峰：</em><a href="https://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener"><em>点击这里</em></a><br><em>《this 的值到底是什么》—— 方应杭：</em><a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="noopener"><em>点击这里</em></a><br>_<br><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>原型 - JS Core</title>
    <link href="/2020/04/30/%E5%8E%9F%E5%9E%8B%20-%20JS%20Core/"/>
    <url>/2020/04/30/%E5%8E%9F%E5%9E%8B%20-%20JS%20Core/</url>
    
    <content type="html"><![CDATA[<p>原型的相关知识，内容包括原型链、公式、功能、举例。<br>_<br><em>之前写过一篇有关原型的总结：</em><a href="https://juejin.im/post/5e5377ee518825494c75e49d" target="_blank" rel="noopener"><em>点击这里</em></a></p><h2 id="一、原型链"><a href="#一、原型链" class="headerlink" title="一、原型链"></a>一、原型链</h2><p><strong>JavaScript 是原型链的方式继承</strong></p><ul><li>每个实例对象（ object ）都有一个私有属性（称之为 <strong>proto</strong> ）</li><li>指向它的构造函数的原型对象（prototype ）</li><li>该原型对象也有一个自己的原型对象( <strong>proto</strong> ) ，层层向上直到一个对象的原型对象为 null</li></ul><h2 id="二、公式"><a href="#二、公式" class="headerlink" title="二、公式"></a>二、公式</h2><p>**<br>&lt;实例对象&gt;.<strong>proto</strong> === &lt;其构造函数&gt;.prototype</p><h2 id="三、功能"><a href="#三、功能" class="headerlink" title="三、功能"></a>三、功能</h2><p>**</p><ul><li>当试图访问一个对象的属性时，它不仅仅在该对象上搜寻，还会搜寻该对象的原型</li><li>以及该对象的原型的原型</li><li>依次层层向上搜索，直到找到一个名字匹配的属性或到达原型链的末尾</li></ul><h2 id="四、举例"><a href="#四、举例" class="headerlink" title="四、举例"></a>四、举例</h2><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> object = &#123;name:'Eddie',age:<span class="hljs-number">18</span>&#125;<span class="hljs-keyword">let</span> <span class="hljs-built_in">array</span> = <span class="hljs-literal">[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span><span class="hljs-keyword">let</span> f = <span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;console.log('Hello')&#125;object.__proto__<span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>prototype  <span class="hljs-comment">// true</span><span class="hljs-built_in">array</span>.__proto__<span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>prototype  <span class="hljs-comment">// true</span>f.__proto__<span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Function</span>.</span></span>prototype  <span class="hljs-comment">// true</span><span class="hljs-built_in">array</span>.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__proto__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__proto__</span> </span><span class="hljs-operator">==</span></span>= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>prototype  <span class="hljs-comment">// true</span>f.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">__proto__</span>.</span><span class="hljs-module"><span class="hljs-identifier">__proto__</span> </span><span class="hljs-operator">==</span></span>= <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>prototype  <span class="hljs-comment">// true</span>object.has<span class="hljs-constructor">OwnProperty('<span class="hljs-params">name</span>')</span>  <span class="hljs-comment">// true</span><span class="hljs-built_in">array</span>.push(<span class="hljs-number">6</span>)  <span class="hljs-comment">// array 的值变为 [1,2,3,4,5,6]</span><span class="hljs-built_in">array</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>  <span class="hljs-comment">// array 的值变为 "1,2,3,4,5,6"</span></code></pre><p>object 对象下无 hasOwnProperty 方法，但能够使用该方法，为什么呢？因为原型呀，hasOwnProperty 保存在 object 的构造函数 Object 的原型上面，object 下有的私有属性 <strong>proto</strong>，指向了 Object 下的 prototype</p><p>array.push(6) 中能够使用 push 方法也是这个原理，那为什么还能用 toSring 方法呢？因为原型链呀，array 的原型的原型是 Object 的原型，其下有 toString 方法</p><p><em>「@浪里淘沙的小法师」</em></p><p>_</p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JSON 语言</title>
    <link href="/2020/04/29/JSON%20%E8%AF%AD%E8%A8%80/"/>
    <url>/2020/04/29/JSON%20%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>JSON 语言的相关知识，内容包括简介、JSON 的两种形式、对象和数组中的值。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>JSON 全称 JavaScript Object Notion，是一种轻量级的数据交换语言，它借鉴了 JavaScript 语言<br>_<br>_中文官网：→ <em>[</em>点击这里_](<a href="http://json.org/json-zh.html" target="_blank" rel="noopener">http://json.org/json-zh.html</a>)<br>_</p><h2 id="二、JSON-的两种形式"><a href="#二、JSON-的两种形式" class="headerlink" title="二、JSON 的两种形式"></a>二、JSON 的两种形式</h2><ul><li>“名称 + 值”的集合</li><li>“值”的有序列表</li></ul><h3 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h3><pre><code class="hljs angelscript">&#123;<span class="hljs-built_in">string</span>1: value1,<span class="hljs-built_in">string</span>2: value2,  <span class="hljs-built_in">string</span>3: value3&#125;</code></pre><h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h3><pre><code class="hljs json">[value1, value2, value3]</code></pre><h2 id="三、对象和数组中的值"><a href="#三、对象和数组中的值" class="headerlink" title="三、对象和数组中的值"></a>三、对象和数组中的值</h2><p>值可以是 string、number、True、False、null、object、array，这些结构可以嵌套</p><p>字符串是有双引号包围的任意数量 Unicode 字符的集合，可以使用反斜杠转义</p><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 语言</title>
    <link href="/2020/04/29/Markdown%20%E8%AF%AD%E8%A8%80/"/>
    <url>/2020/04/29/Markdown%20%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>Markdown 语言的相关知识，内容包括简介、举例子。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>Markdown 是一种轻量级标记语言，它让我们可以使用纯文本的方式编写文档</p><p>我主要用于写博客，超方便</p><p>格式有：标题、有序列表、无序列表、代码、加粗、斜体、链接、图片、引用、表格</p><pre><code class="hljs clean">## 二级标题  ### 三级标题  #### 四级标题<span class="hljs-number">1.</span> 有  <span class="hljs-number">2.</span> 序  <span class="hljs-number">3.</span> 列  <span class="hljs-number">4.</span> 表* 无  * 序  * 列  * 表</code></pre><p>代码</p><pre><code class="hljs gherkin"><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>加粗<span class="hljs-symbol">*</span><span class="hljs-symbol">*</span><span class="hljs-symbol">*</span>斜体<span class="hljs-symbol">*</span>[链接](https://www.yuque.com/machaoxue/notes/mohfo7/)![插入图片](https://cdn.nlark.com/yuque/0/2020/png/916537/1587718621905-c730c4ca-ea2e-45cf-8131-c4ff94e3b38f.png)&gt;引用|<span class="hljs-string"> 姓名   </span>|<span class="hljs-string"> 语文  </span>|<span class="hljs-string"> 数学   </span>|<span class="hljs-string">   英语 </span>||<span class="hljs-string"> ------ </span>|<span class="hljs-string"> :---: </span>|<span class="hljs-string"> :----- </span>|<span class="hljs-string"> -----: </span>||<span class="hljs-string"> 小白   </span>|<span class="hljs-string">  96   </span>|<span class="hljs-string"> 111    </span>|<span class="hljs-string">    111 </span>||<span class="hljs-string"> 张三三 </span>|<span class="hljs-string">  78   </span>|<span class="hljs-string"> 78     </span>|<span class="hljs-string">     99 </span>||<span class="hljs-string"> 阿强强 </span>|<span class="hljs-string">  125  </span>|<span class="hljs-string"> 93     </span>|<span class="hljs-string">     95 </span>||<span class="hljs-string"> 默认   </span>|<span class="hljs-string"> 居中  </span>|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|</code></pre><h2 id="二、举例子"><a href="#二、举例子" class="headerlink" title="二、举例子"></a>二、举例子</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><ol><li>有</li><li>序</li><li>列</li><li>表</li></ol><ul><li>无</li><li>序</li><li>列</li><li>表</li></ul><pre><code class="hljs plain">代码</code></pre><p>**<br><strong>加粗</strong>    _斜体    _<a href="https://www.yuque.com/machaoxue/notes/mohfo7/" target="_blank" rel="noopener">链接</a></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1587718621905-c730c4ca-ea2e-45cf-8131-c4ff94e3b38f.png#align=left&display=inline&height=469&margin=%5Bobject%20Object%5D&name=image.png&originHeight=744&originWidth=593&size=36012&status=done&style=none&width=374" srcset="/img/loading.gif" alt="image.png"></p><table><thead><tr><th>姓名</th><th align="center">语文</th><th align="left">数学</th><th align="right">英语</th></tr></thead><tbody><tr><td>小白</td><td align="center">96</td><td align="left">111</td><td align="right">111</td></tr><tr><td>张三三</td><td align="center">78</td><td align="left">78</td><td align="right">99</td></tr><tr><td>阿强强</td><td align="center">125</td><td align="left">93</td><td align="right">95</td></tr><tr><td>默认</td><td align="center">居中</td><td align="left">左对齐</td><td align="right">右对齐</td></tr></tbody></table><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS 语言</title>
    <link href="/2020/04/29/CSS%20%E8%AF%AD%E8%A8%80/"/>
    <url>/2020/04/29/CSS%20%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>CSS 的相关知识，内容包括初始化 CSS 代码、文本在 div 里居中、div 居中、让 div 占屏幕的 50%、CSS 选择器、CSS 动画、滚动栏。</p><p>_之前写过一篇有关 CSS 的总结 → <em>[</em>点击这里_](<a href="https://juejin.im/post/5e4f741fe51d452717262614#heading-0" target="_blank" rel="noopener">https://juejin.im/post/5e4f741fe51d452717262614#heading-0</a>)</p><h2 id="一、初始化-CSS-代码"><a href="#一、初始化-CSS-代码" class="headerlink" title="一、初始化 CSS 代码"></a>一、初始化 CSS 代码</h2><pre><code class="hljs css">*&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">box-sizing</span>:border-box&#125;* <span class="hljs-selector-pseudo">::before</span>,* <span class="hljs-selector-pseudo">::after</span>&#123;<span class="hljs-attribute">box-sizing</span>:border-box&#125;<span class="hljs-selector-tag">ul</span>,<span class="hljs-selector-tag">ol</span>&#123;<span class="hljs-attribute">list-style</span>:none&#125;</code></pre><h2 id="二、Div-宽高"><a href="#二、Div-宽高" class="headerlink" title="二、Div 宽高"></a>二、Div 宽高</h2><p>不要把 div 的高高度写具体，一般写 max-height、min-height，具体高度让里面的内容去撑</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="二、文本在-div-里居中"><a href="#二、文本在-div-里居中" class="headerlink" title="二、文本在 div 里居中"></a>二、文本在 div 里居中</h2><pre><code class="hljs mel"><span class="hljs-keyword">text</span>-<span class="hljs-keyword">align</span>:center  <span class="hljs-comment">/*左右居中*/</span></code></pre><ul><li>vertical-align 用于指定元素的垂直方向对齐方式</li><li>line-height:100px 用于指定文字的行高</li></ul><p>如果文字只有一行，把高度和行高设置成一样高，可以达到上下居中的效果</p><pre><code class="hljs arduino"><span class="hljs-built_in">height</span>: <span class="hljs-number">24</span>px<span class="hljs-built_in">line</span>-<span class="hljs-built_in">height</span>:<span class="hljs-number">24</span>px</code></pre><h2 id="三、div-居中"><a href="#三、div-居中" class="headerlink" title="三、div 居中"></a>三、div 居中</h2><p>父元素使用 flex 布局即可</p><pre><code class="hljs css"><span class="hljs-selector-id">#module1</span>&#123;    <span class="hljs-attribute">display</span>:flex;    <span class="hljs-attribute">justify-content</span>:center;    <span class="hljs-attribute">align-items</span>:center;&#125;</code></pre><p>父元素 flex 布局下，还可以调整子元素左右居中</p><pre><code class="hljs css"><span class="hljs-selector-id">#module1</span>&gt;<span class="hljs-selector-class">.circle</span>&#123;    <span class="hljs-attribute">margin-left</span>:auto;    <span class="hljs-attribute">margin-right</span>:auto;&#125;</code></pre><h2 id="四、让-div-占屏幕的-50"><a href="#四、让-div-占屏幕的-50" class="headerlink" title="四、让 div 占屏幕的 50%"></a>四、让 div 占屏幕的 50%</h2><pre><code class="hljs scss"><span class="hljs-attribute">width</span>:<span class="hljs-number">50vw</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">50vh</span></code></pre><h2 id="五、CSS-选择器"><a href="#五、CSS-选择器" class="headerlink" title="五、CSS 选择器"></a>五、CSS 选择器</h2><p>选择元素通过以下三种方式</p><ol><li>标签名  // div</li><li>id     // #id-name</li><li>class  // .class-name</li></ol><p>通过逗号、大于号、空格来对结果扩大筛选，缩小删选</p><pre><code class="hljs stylus"><span class="hljs-comment">/* 使用逗号、大于号时，中间可以忽略间隙*/</span><span class="hljs-selector-id">#module1</span>,.module2&#123;&#125;  <span class="hljs-comment">//选择两种</span>#module1&gt;.button-list&#123;&#125;  <span class="hljs-comment">// 一级子元素</span><span class="hljs-selector-class">.button-list</span> button&#123;&#125;  <span class="hljs-comment">// 内部所有</span><span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.b</span> <span class="hljs-comment">// 同时满足</span></code></pre><h2 id="六、CSS-动画"><a href="#六、CSS-动画" class="headerlink" title="六、CSS 动画"></a>六、CSS 动画</h2><p>transform 属性配合 transition 做出简单的动画</p><ul><li>translate – 位移</li><li>scale – 缩放</li><li>rotate – 旋转</li></ul><pre><code class="hljs css"><span class="hljs-selector-id">#module3</span>&gt;<span class="hljs-selector-class">.square</span>&#123;    <span class="hljs-attribute">transition</span>:transform <span class="hljs-number">1s</span>;&#125;<span class="hljs-selector-id">#module3</span>&gt;<span class="hljs-selector-class">.active</span>&#123;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">10vw</span>) ;&#125;</code></pre><p>animation 做动画更加高端一些，配合 transition 使用</p><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> change &#123;   0%&#123;       <span class="hljs-attribute">background</span>: red;   &#125;   100%&#123;       <span class="hljs-attribute">background</span>: blue;   &#125;&#125;<span class="hljs-selector-id">#module4</span>&gt;<span class="hljs-selector-class">.active</span>&#123;   <span class="hljs-attribute">animation</span>: change <span class="hljs-number">1s</span> infinite alternate linear;&#125;</code></pre><h2 id="七、滚动栏"><a href="#七、滚动栏" class="headerlink" title="七、滚动栏"></a>七、滚动栏</h2><ul><li>咦，flex 布局怎么宽度不够，哦，原来17像素是滚动条的宽度</li><li>14 ~ 19 像素大概是滚动条的宽度</li><li>CSS 中隐藏滚动条可以可以做如下操作</li></ul><pre><code class="hljs arduino"><span class="hljs-built_in">overflow</span>: hidden</code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTML 语言</title>
    <link href="/2020/04/28/HTML%20%E8%AF%AD%E8%A8%80/"/>
    <url>/2020/04/28/HTML%20%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>HTML 的相关知识，内容包括 Emmet 操作，命名。</p><p>_之前写过一篇 HTML 标签的总结 → <em>[</em>点击这里_](<a href="https://juejin.im/post/5e70bb7e51882549265ccbbf" target="_blank" rel="noopener">https://juejin.im/post/5e70bb7e51882549265ccbbf</a>)</p><h2 id="一、Emmet-操作"><a href="#一、Emmet-操作" class="headerlink" title="一、Emmet 操作"></a>一、Emmet 操作</h2><p>创建多个标签，id、class、text 自定义</p><pre><code class="hljs gams"><span class="hljs-built-in">div</span>#test<span class="hljs-symbol">$</span>.testing&#123;测试<span class="hljs-symbol">$</span>&#125;*<span class="hljs-number">5</span></code></pre><p>创建标签嵌套标签</p><pre><code class="hljs angelscript">ol*<span class="hljs-number">2</span>&gt;li*<span class="hljs-number">3</span></code></pre><h2 id="二、命名"><a href="#二、命名" class="headerlink" title="二、命名"></a>二、命名</h2><p>在HTML 页面中，我的命名风格不再使用驼峰式，使用“-”连接两个单词的方式。</p><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"module-test"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">"button-list"</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;&lt;button <span class="hljs-built_in">class</span>=<span class="hljs-string">"commit-button"</span>&gt;&lt;/button&gt;</code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript 语言</title>
    <link href="/2020/04/28/TypeScript%20%E8%AF%AD%E8%A8%80/"/>
    <url>/2020/04/28/TypeScript%20%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>它是JavaScript 的一个超集，扩展了JavaScript 的语法</p><p>使用 TypeScript 后，它会先将 TypeScript 编译成 JavaScript，再运行</p><ul><li>编译出错了，说明 TypeScript 错了（终端报错）</li><li>运行出错了，说明 JavaScript 错了（浏览器报错）</li></ul><p>TypeScript 相当于提前打了一个预防针，必须写明变量类型</p><ul><li>类型提示</li><li>编译时报错</li><li>类型检查</li></ul><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 语言</title>
    <link href="/2020/04/27/JavaScript%20%E8%AF%AD%E8%A8%80/"/>
    <url>/2020/04/27/JavaScript%20%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 语言的相关知识，内容包括数据类型、函数、对象、类、… 语法。</p><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><p>JavaScript 有七种数据类型，口诀是“四基两空一对象”</p><ul><li>数值（Number）</li><li>字符串（String）</li><li>逻辑值（Boolean）</li><li>Symbol</li><li>undefined</li><li>null</li><li>object</li></ul><p>在 JavaScript 中，数组和函数是特殊的对象</p><pre><code class="hljs xquery"><span class="hljs-keyword">let</span><span class="hljs-built_in"> number</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span><span class="hljs-built_in"> string</span> = Hello<span class="hljs-keyword">let</span> object = <span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">'Eddie'</span>,age:<span class="hljs-number">18</span>&#125;<span class="hljs-keyword">let</span> <span class="hljs-keyword">array</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<span class="hljs-keyword">let</span> f = <span class="hljs-keyword">function</span>()&#123;&#125;</code></pre><p><strong>一些逻辑值判断</strong></p><ul><li>除了这五个 falsy 值，其他都是 True</li></ul><pre><code class="hljs arcade"><span class="hljs-number">0</span><span class="hljs-literal">NaN</span><span class="hljs-string">''</span><span class="hljs-literal">undefined</span><span class="hljs-literal">null</span></code></pre><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="1-定义时函数的写法"><a href="#1-定义时函数的写法" class="headerlink" title="1. 定义时函数的写法"></a>1. 定义时函数的写法</h3><p>JS 有三种函数写法，具名函数和匿名函数有 this，箭头函数无 this</p><pre><code class="hljs stylus"><span class="hljs-comment">// 具名函数</span>function f(x)&#123;console.log(x+<span class="hljs-number">1</span>)&#125;<span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>  <span class="hljs-comment">// 2</span><span class="hljs-function"><span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>  <span class="hljs-comment">// 3</span><span class="hljs-comment">// 匿名函数</span>let f2 = function(x)&#123;console.log(x+<span class="hljs-number">2</span>)&#125;<span class="hljs-function"><span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>  <span class="hljs-comment">// 3</span><span class="hljs-function"><span class="hljs-title">f2</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span>  <span class="hljs-comment">// 4</span><span class="hljs-comment">// 箭头函数</span>let f3 = (x)=&gt;&#123;console.log(x+<span class="hljs-number">3</span>)&#125;<span class="hljs-function"><span class="hljs-title">f3</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span> <span class="hljs-comment">// 4</span><span class="hljs-function"><span class="hljs-title">f3</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span> <span class="hljs-comment">// 5</span></code></pre><h3 id="2-对象中函数的写法"><a href="#2-对象中函数的写法" class="headerlink" title="2. 对象中函数的写法"></a>2. 对象中函数的写法</h3><ul><li>对象中的函数叫做“方法”</li><li>写法 1、2 有 this，写法 3 无 this</li></ul><pre><code class="hljs sas">let object = &#123;f(<span class="hljs-meta">x</span>)&#123;console<span class="hljs-meta">.log(</span><span class="hljs-meta">x</span>+1)&#125;,  f2: functi<span class="hljs-meta">on(</span><span class="hljs-meta">x</span>)&#123;console<span class="hljs-meta">.log(</span><span class="hljs-meta">x</span>+2)&#125;,  f3: (<span class="hljs-meta">x</span>)=&gt;&#123;console<span class="hljs-meta">.log(</span><span class="hljs-meta">x</span>+3)&#125;&#125;object.f(1)object.f2(1)object.f3(1)</code></pre><p>个人最喜欢喜欢第一种写法，最简洁</p><h2 id="三、对象"><a href="#三、对象" class="headerlink" title="三、对象"></a>三、对象</h2><ul><li>对象是一系列属性的集合</li><li>对象中的函数叫“方法”</li></ul><pre><code class="hljs ceylon"><span class="hljs-keyword">let</span> <span class="hljs-keyword">object</span> = &#123;name:<span class="hljs-string">'Eddie'</span>,age:<span class="hljs-number">18</span>&#125;</code></pre><h2 id="三、类"><a href="#三、类" class="headerlink" title="三、类"></a>三、类</h2><ul><li>定义类和继承类</li></ul><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个矩形类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reactangle</span></span>&#123;<span class="hljs-keyword">constructor</span>(length,width)&#123;  <span class="hljs-keyword">this</span>.length = length    <span class="hljs-keyword">this</span>.width = width    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">"reactangle"</span>  &#125;  area()&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.length*<span class="hljs-keyword">this</span>.width  &#125;  perimeter()&#123;  <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span>.length + <span class="hljs-keyword">this</span>.width)*<span class="hljs-number">2</span>  &#125;&#125;<span class="hljs-keyword">let</span> reactangle = <span class="hljs-keyword">new</span> Reactangle(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-built_in">console</span>.log(reactangle.name)  <span class="hljs-comment">// reactangle</span><span class="hljs-built_in">console</span>.log(reactangle.area())  <span class="hljs-comment">// 12</span><span class="hljs-built_in">console</span>.log(reactangle.perimeter())  <span class="hljs-comment">// 14</span><span class="hljs-comment">// 定义一个正方形类，继承矩形类，并可以计算出以它的边长形成的立方体</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Reactangle</span></span>&#123;<span class="hljs-keyword">constructor</span>(width)&#123;  <span class="hljs-keyword">super</span>()    <span class="hljs-keyword">this</span>.length = width    <span class="hljs-keyword">this</span>.width = width    <span class="hljs-keyword">this</span>.name = <span class="hljs-string">"square"</span>  &#125;  volumn()&#123;  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(<span class="hljs-keyword">this</span>.width,<span class="hljs-number">3</span>)  &#125;&#125;<span class="hljs-keyword">let</span> square = <span class="hljs-keyword">new</span> Square(<span class="hljs-number">5</span>)<span class="hljs-built_in">console</span>.log(square.name)  <span class="hljs-comment">// square</span><span class="hljs-built_in">console</span>.log(square.area())  <span class="hljs-comment">// 25</span><span class="hljs-built_in">console</span>.log(square.perimeter())  <span class="hljs-comment">// 20</span><span class="hljs-built_in">console</span>.log(square.volumn())  <span class="hljs-comment">// 125</span></code></pre><h2 id="四、…-语法"><a href="#四、…-语法" class="headerlink" title="四、… 语法"></a>四、… 语法</h2><ul><li>… 扩展运算法能够把对象和数组拆分开</li></ul><p><em>参考博客：</em><a href="https://blog.csdn.net/qq_30100043/article/details/53391308" target="_blank" rel="noopener"><em>ES6 扩展运算符</em></a><br>_</p><h3 id="1-数组中-…-的使用"><a href="#1-数组中-…-的使用" class="headerlink" title="1. 数组中 … 的使用"></a>1. 数组中 … 的使用</h3><pre><code class="hljs angelscript">let <span class="hljs-built_in">array</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]console.log(...<span class="hljs-built_in">array</span>)  <span class="hljs-comment">// 1 2 3 4 5</span>console.log(<span class="hljs-number">0</span>,...<span class="hljs-built_in">array</span>,<span class="hljs-number">6</span>)  <span class="hljs-comment">// 0 1 2 3 4 5 6</span></code></pre><h3 id="2-对象中-…-的使用"><a href="#2-对象中-…-的使用" class="headerlink" title="2. 对象中 … 的使用"></a>2. 对象中 … 的使用</h3><pre><code class="hljs ceylon"><span class="hljs-keyword">let</span> <span class="hljs-keyword">object</span> = &#123;name:<span class="hljs-string">'Eddie'</span>,age:<span class="hljs-number">18</span>&#125;<span class="hljs-keyword">let</span> <span class="hljs-keyword">object</span><span class="hljs-number">2</span> = &#123;...<span class="hljs-keyword">object</span>,hobby:<span class="hljs-string">'music'</span>&#125;console.log(<span class="hljs-keyword">object</span><span class="hljs-number">2</span>)  <span class="hljs-comment">// &#123;&#123;name:'Eddie',age:18&#125;,hobby:'music'&#125;</span></code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python 语言</title>
    <link href="/2020/04/26/Python%20%E8%AF%AD%E8%A8%80/"/>
    <url>/2020/04/26/Python%20%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>Python 语言的相关知识，内容包括数据类型、函数、对象、类。</p><h2 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h2><p>Python 数据类型可以分成两大类，基本类型和容器类型</p><ul><li>基本类型：整数、浮点数、复数、字符串、逻辑值</li></ul><pre><code class="hljs autoit"><span class="hljs-built_in">number</span> = <span class="hljs-number">1</span>number2 = <span class="hljs-number">2.2</span>number3 = <span class="hljs-number">3</span>+<span class="hljs-number">3</span>j<span class="hljs-built_in">string</span> = <span class="hljs-string">'Hello'</span>t = <span class="hljs-literal">True</span> / <span class="hljs-literal">False</span>type(<span class="hljs-built_in">number</span>)  <span class="hljs-meta"># &lt;class <span class="hljs-string">'int'</span>&gt;</span></code></pre><ul><li>容器类型：列表、元组、字典、集合</li></ul><pre><code class="hljs angelscript">list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>] tuple1 = (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>)dict1 = &#123;<span class="hljs-string">'a'</span>:<span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>:<span class="hljs-number">2</span>, <span class="hljs-string">'c'</span>:<span class="hljs-number">3</span>&#125;set1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;</code></pre><p><strong>一些数学运算</strong><br>**</p><pre><code class="hljs angelscript"><span class="hljs-number">5</span>/<span class="hljs-number">2</span>  # <span class="hljs-number">2.5</span>，这是完整的除法，得到完整的商<span class="hljs-number">5</span><span class="hljs-comment">//2  # 2，得到商的整数部分</span><span class="hljs-number">5</span>%<span class="hljs-number">2</span>  # <span class="hljs-number">1</span>，得到余数divmod(<span class="hljs-number">5</span>,<span class="hljs-number">2</span>)  # (<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)，得到一个元组，分别是商的整数部分和余数<span class="hljs-number">2</span>**<span class="hljs-number">3</span>  # <span class="hljs-number">8</span>，<span class="hljs-number">2</span> 的 <span class="hljs-number">3</span> 次方abs(<span class="hljs-number">-3</span>)  # <span class="hljs-number">3</span>，求绝对值<span class="hljs-number">7</span> &gt; <span class="hljs-number">3</span> &gt;=<span class="hljs-number">4</span>  # True，连续判断</code></pre><p><strong>一些逻辑值判断</strong></p><ul><li>对于整数、浮点数和复数类型，0是“假”，所有非0的数值都是“真”</li><li>对于字符串类型，空串(“”)是“假”，所有非空串都是“真”</li><li>所有序列类型（包括字符串），空序列是“假”，所有非空的序列都是“真”</li><li>空值None表示“无意义”或“不知道”，也是“假”</li></ul><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><p>在命名变量的时，我被“坑”了一波，不能直接使用 list、set、dict，因为这几个名字在 Python 已经是函数名了</p><ul><li>与 JavaScript 不同，JavaScript 可以直接使用 array，object 等，因为它的函数名是大写</li><li>这里以后我要注意了，在变量名加一个后面接一个数字</li></ul><pre><code class="hljs angelscript"><span class="hljs-comment">// 普通函数</span>def f(a,b):<span class="hljs-keyword">return</span> a+<span class="hljs-number">2</span>*bf(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)  # <span class="hljs-number">5</span><span class="hljs-comment">// 匿名函数</span>f = lambda a,b:<span class="hljs-number">2</span>*a+bf(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)  # <span class="hljs-number">7</span></code></pre><p><strong>map() 函数</strong></p><ul><li>Python 3.x 中，map() 返回一个迭代器，从前 Python 2.x 中是返回一个列表</li></ul><pre><code class="hljs angelscript">list1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]f = lambda x:x**<span class="hljs-number">2</span>list(map(f,list1))  # [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">25</span>]</code></pre><h2 id="三、对象"><a href="#三、对象" class="headerlink" title="三、对象"></a>三、对象</h2><ul><li>Python 中的所有事物都是以对象形式存在，从简单的数值类型，到复杂的代码模块，都是对象</li><li>对象以 id 作为标识，既包含数据(属性)，也包含代码(方法)，是某一类具体事物的特殊实例</li></ul><pre><code class="hljs applescript"><span class="hljs-comment"># 查看 id</span><span class="hljs-built_in">id</span>(<span class="hljs-number">1</span>)  <span class="hljs-comment"># 140714626041504</span><span class="hljs-comment"># 查看属性和方法</span>dir(<span class="hljs-number">1</span>)</code></pre><h2 id="四、类"><a href="#四、类" class="headerlink" title="四、类"></a>四、类</h2><pre><code class="hljs monkey"><span class="hljs-meta"># 定义一个矩形类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reactangle</span>:</span>def __init__(<span class="hljs-built_in">self</span>,length,width):  <span class="hljs-built_in">self</span>.length = length    <span class="hljs-built_in">self</span>.width = width    <span class="hljs-built_in">self</span>.name = <span class="hljs-string">"Name: reactangle"</span>  def area(<span class="hljs-built_in">self</span>): <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>.length*<span class="hljs-built_in">self</span>.width  def perimeter(<span class="hljs-built_in">self</span>): <span class="hljs-keyword">return</span> (<span class="hljs-built_in">self</span>.length+<span class="hljs-built_in">self</span>.width)*<span class="hljs-number">2</span>reactangle = Reactangle(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<span class="hljs-built_in">print</span>(reactangle.area())  // <span class="hljs-number">12</span><span class="hljs-built_in">print</span>(reactanle.perimeter())  // <span class="hljs-number">14</span><span class="hljs-meta"># 定义一个正方形类，继承矩形类，额外可以计算出以它的边长形成的立方体体积</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span>(<span class="hljs-title">Reactangle</span>):</span>def __init__(<span class="hljs-built_in">self</span>,width):  <span class="hljs-built_in">self</span>.length = width  <span class="hljs-built_in">self</span>.width = width    <span class="hljs-built_in">self</span>.name = <span class="hljs-string">"Name: square"</span>  def volumn(<span class="hljs-built_in">self</span>):  <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(<span class="hljs-built_in">self</span>.width,<span class="hljs-number">3</span>)  square = Square(<span class="hljs-number">5</span>) <span class="hljs-built_in">print</span>(square.area())  // <span class="hljs-number">25</span> <span class="hljs-built_in">print</span>(square.perimeter())  // <span class="hljs-number">20</span> <span class="hljs-built_in">print</span>(square.volumn())  // <span class="hljs-number">125</span></code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>编程</title>
    <link href="/2020/04/26/%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/04/26/%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>编程的相关知识，内容包括简介、数据类型、控制流程、函数、对象、类、三种编程方式。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>编程，顾名思义就是编写程序。程序，就是做一件事情或者解决一个问题所采取的一系列固定步骤。</p><p>编程语言有许多不同的类型，它们有不同的业务场景。编写程序，目的是让计算机解决某个问题或完成某项功能。我目前学习了 JavaScript 和 Python 两门编程语言，在此特别想总结一下编程相关的一些概念。</p><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><p>数据(data)是信息的表现形式和载体，是对现实世界实体和概念的抽象。</p><p>Python 数据类型</p><pre><code class="hljs angelscript"># 基本类型整数 <span class="hljs-built_in">int</span>        <span class="hljs-number">123</span>浮点数 <span class="hljs-built_in">float</span>    <span class="hljs-number">123.456</span>复数 complex    <span class="hljs-number">1123</span>+<span class="hljs-number">456</span>j逻辑值 <span class="hljs-built_in">bool</span>ean  True / False字符串 <span class="hljs-built_in">string</span>   <span class="hljs-string">"Hello word"</span>————————————————————————————————————————————空 none————————————————————————————————————————————# 容器类型列表 list       [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]元组 tuple      (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)字典 dir        &#123;x:<span class="hljs-string">"小明"</span>, y:<span class="hljs-string">"小白"</span>,z:<span class="hljs-string">"小花"</span>&#125;集合 <span class="hljs-keyword">set</span>        &#123;x,y,z&#125;</code></pre><p>JavaScript 数据类型</p><pre><code class="hljs yaml"><span class="hljs-string">数字</span> <span class="hljs-string">number</span>     <span class="hljs-number">123</span><span class="hljs-string">逻辑值</span> <span class="hljs-string">boolean</span>  <span class="hljs-literal">True</span> <span class="hljs-string">/</span> <span class="hljs-literal">False</span><span class="hljs-string">字符串</span> <span class="hljs-string">string</span>   <span class="hljs-string">"Hello word"</span><span class="hljs-string">symbol</span><span class="hljs-string">————————————————————————————</span><span class="hljs-string">空</span> <span class="hljs-literal">null</span><span class="hljs-string">空</span> <span class="hljs-string">undefined</span><span class="hljs-string">—————————————————————————————</span><span class="hljs-string">对象</span> <span class="hljs-string">object</span></code></pre><p>JavaScript 和 Python 都是动态语言，不用提前声明变量的类型。</p><h2 id="三、控制流程"><a href="#三、控制流程" class="headerlink" title="三、控制流程"></a>三、控制流程</h2><p>几乎所有的程序设计语言都提供了三种控制流程</p><ol><li>顺序结构：按照语句队列前后顺序来确定下一条将要执行的语句</li><li>条件分支结构：根据当前情况来选择下一条语句的位置</li><li>循环结构：周而复始地执行一系列语句</li></ol><h3 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h3><p>Python</p><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-number">1</span>c = <span class="hljs-selector-tag">a</span> + <span class="hljs-number">2</span><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(c)</span></span></code></pre><p>JavaScript</p><pre><code class="hljs nix"><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span> = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span> = a + <span class="hljs-number">2</span>console.log(c)</code></pre><h3 id="2-条件分支结构"><a href="#2-条件分支结构" class="headerlink" title="2. 条件分支结构"></a>2. 条件分支结构</h3><p>Python</p><pre><code class="hljs routeros">a,b = 1,3<span class="hljs-keyword">if</span> (a &lt; b):    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"a 小"</span>)<span class="hljs-keyword">else</span>:    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">"a 大"</span>)</code></pre><p>JavaScript</p><pre><code class="hljs erlang"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><span class="hljs-keyword">let</span> b = <span class="hljs-number">3</span><span class="hljs-function"><span class="hljs-title">if</span> <span class="hljs-params">(a &lt; b)</span>&#123;</span><span class="hljs-function">    <span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(<span class="hljs-string">"a 小"</span>)</span></span><span class="hljs-function">&#125;</span><span class="hljs-function"><span class="hljs-title">else</span>&#123;</span><span class="hljs-function">    <span class="hljs-title">console</span>.<span class="hljs-title">log</span><span class="hljs-params">(<span class="hljs-string">"a 大"</span>)</span></span><span class="hljs-function">&#125;</span></code></pre><h3 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3. 循环结构"></a>3. 循环结构</h3><p>Python</p><pre><code class="hljs routeros"><span class="hljs-comment"># 迭代循环</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(1,11):    <span class="hljs-builtin-name">print</span>(i)———————————————————————————————<span class="hljs-comment"># 条件循环</span>i = 1<span class="hljs-keyword">while</span> (i&lt;=10):    <span class="hljs-builtin-name">print</span>(i)    i += 2</code></pre><p>JavaScript</p><pre><code class="hljs angelscript"><span class="hljs-comment">// 迭代循环</span><span class="hljs-keyword">for</span> (let i=<span class="hljs-number">1</span>,i&lt;=<span class="hljs-number">10</span>,i++)&#123;    console.log(i)&#125;——————————————————————————————<span class="hljs-comment">// 条件循环</span>let i = <span class="hljs-number">1</span><span class="hljs-keyword">while</span> (i&lt;=<span class="hljs-number">10</span>)&#123;    console.log(i)    i +=<span class="hljs-number">2</span>&#125;</code></pre><h2 id="四、函数（function）"><a href="#四、函数（function）" class="headerlink" title="四、函数（function）"></a>四、函数（function）</h2><p>函数是一种封装。程序中实现明确功能的代码段可以封装成一个函数，以便复用。</p><h3 id="1-定义并调用函数"><a href="#1-定义并调用函数" class="headerlink" title="1. 定义并调用函数"></a>1. 定义并调用函数</h3><p>Python</p><pre><code class="hljs livecodeserver">def <span class="hljs-built_in">add</span>(<span class="hljs-keyword">a</span>,b):    <span class="hljs-literal">return</span> <span class="hljs-keyword">a</span> + b<span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</code></pre><p>JavaScript</p><pre><code class="hljs stylus">function add(<span class="hljs-selector-tag">a</span>,b)&#123;    return <span class="hljs-selector-tag">a</span> + b&#125;<span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)</span></span></code></pre><h3 id="2-函数的参数"><a href="#2-函数的参数" class="headerlink" title="2. 函数的参数"></a>2. 函数的参数</h3><ol><li>形式参数(parameter)：函数创建和定义过程中，函数名后面括号里的参数</li><li>实际参数(argument)：函数在调用过程中传入的参数</li></ol><p>Python 定义和调用函数时，参数可以是在参数表中写明参数名的固定参数，也可以是数量不定的可变参数</p><pre><code class="hljs routeros"><span class="hljs-comment"># 固定了顺序和数量的固定参数</span>def <span class="hljs-builtin-name">add</span>(key1,<span class="hljs-attribute">key2</span>=10):    return key1+key2<span class="hljs-builtin-name">add</span>(2)  # 12<span class="hljs-builtin-name">add</span>(2,3)  # 5————————————————————————————————————————<span class="hljs-comment"># 不带参数名的多个参数</span>def f1(<span class="hljs-number">*a</span>rgs):    <span class="hljs-builtin-name">print</span>(args)    <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args:        <span class="hljs-builtin-name">print</span>(arg)f1(1,2,3)  # (1,2,3) 1 2 3————————————————————————————————————————<span class="hljs-comment"># key=value 形式的多个参数 </span>def f1(**kwdargs):    <span class="hljs-builtin-name">print</span>(kwdargs)    <span class="hljs-keyword">for</span> kwdarg <span class="hljs-keyword">in</span> kwdargs:        <span class="hljs-builtin-name">print</span>(kwdarg)f1(<span class="hljs-attribute">a</span>=1,b=2,c=3)  # &#123;<span class="hljs-string">'a'</span>: 1, <span class="hljs-string">'b'</span>: 2, <span class="hljs-string">'c'</span>: 3&#125; a b c</code></pre><p>JavaScript 定义和调用函数时，参数的写法更随意，形参甚至可以不写</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)  <span class="hljs-comment">// arguments 是一个伪数组</span>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">arguments</span>.length;i++)&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>[i])    &#125;&#125;f1(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)  <span class="hljs-comment">// [3,4,5] 3 4 5</span></code></pre><p>形式参数只是代表一个位置、一个变量名，实际参数是一个具体内容，赋值到变量的值</p><h2 id="五-对象-object"><a href="#五-对象-object" class="headerlink" title="五. 对象(object)"></a>五. 对象(object)</h2><p>对象既表示客观世界问题空间中的某个具体事物，又表示软件系统空间中的基本元素。</p><ul><li>对象 = 属性 + 方法</li></ul><p>Python 中的所有事物都是以对象形式存在</p><ul><li>从简单的数值类型，到复杂的代码模块，都是对象</li><li>它的对象以id作为标识，既包含数据(属性)，也包含代码(方法)，是某一类具体事物的特殊实例</li></ul><pre><code class="hljs bash">id(1)  <span class="hljs-comment"># 查看 id</span><span class="hljs-built_in">type</span>(1)  <span class="hljs-comment"># 查看类</span>dir(1)  <span class="hljs-comment"># 查看属性和方法</span>id(<span class="hljs-built_in">print</span>)  <span class="hljs-comment"># 2202045845072</span><span class="hljs-built_in">type</span>(<span class="hljs-built_in">print</span>)  <span class="hljs-comment"># &lt;class 'builtin_function_or_method'&gt;</span>dir(<span class="hljs-built_in">print</span>)</code></pre><p>JavaScript 中对象是它的数据类型</p><ul><li>数组和函数是特殊的对象</li><li>它的对象同样包含属性和方法，是某一类具体事物的特殊实例</li><li>JS 有构造函数的概念</li></ul><pre><code class="hljs smali">let<span class="hljs-built_in"> array </span>= [1,2,3]console.dir(array)  // 查看自身的属性、方法及原型链</code></pre><h2 id="六、类-class"><a href="#六、类-class" class="headerlink" title="六、类(class)"></a>六、类(class)</h2><p>类是对象的模版，封装了对应现实实体的性质和行为</p><ul><li>实例对象(Instance Objects)是类的具体化</li><li>把类比作模具，对象则是用模具制造出来的零件</li></ul><h3 id="1-定义并调用类"><a href="#1-定义并调用类" class="headerlink" title="1. 定义并调用类"></a>1. 定义并调用类</h3><p>Python</p><pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Force</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,x,y)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">self</span>.fx,<span class="hljs-keyword">self</span>.fy = x,y    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span>        print(<span class="hljs-string">"Force(%s,%s)"</span><span class="hljs-string">%(self.fx,self.fy)</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,x,y)</span></span><span class="hljs-symbol">:</span>        x += <span class="hljs-keyword">self</span>.fx        y += <span class="hljs-keyword">self</span>.fy        <span class="hljs-keyword">return</span> Force(x,y)force = Force(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)force.show()  <span class="hljs-comment"># Force(1,2)</span>force2 = force.add(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)force2.show()  <span class="hljs-comment"># Force(4,6)</span></code></pre><p>JavaScript</p><pre><code class="hljs arduino"><span class="hljs-comment">// ES6 引入 class 语法</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Square</span>&#123;</span>    constructor(<span class="hljs-built_in">width</span>)&#123;        <span class="hljs-keyword">this</span>.<span class="hljs-built_in">width</span> = <span class="hljs-built_in">width</span>    &#125;    getArea()&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-built_in">width</span>*<span class="hljs-keyword">this</span>.<span class="hljs-built_in">width</span>    &#125;    getLength()&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.<span class="hljs-built_in">width</span>*<span class="hljs-number">4</span>    &#125;&#125;let square = <span class="hljs-keyword">new</span> Square(<span class="hljs-number">5</span>)console.<span class="hljs-built_in">log</span>(square.getArea())  <span class="hljs-comment">// 25</span>console.<span class="hljs-built_in">log</span>(square.getLength()) <span class="hljs-comment">// 20</span></code></pre><pre><code class="hljs javascript"><span class="hljs-comment">// JS 风格的语法，在 JS 中定义类就是定义一个构造函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Square</span>(<span class="hljs-params">width</span>)</span>&#123;    <span class="hljs-keyword">this</span>.width = width&#125;Square.prototype.getArea = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.width*<span class="hljs-keyword">this</span>.widvth&#125;Square.prototype.getLength = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.width*<span class="hljs-number">4</span>&#125;<span class="hljs-keyword">let</span> square = <span class="hljs-keyword">new</span> Square(<span class="hljs-number">6</span>)<span class="hljs-built_in">console</span>.log(square.getArea())  <span class="hljs-comment">// 36</span><span class="hljs-built_in">console</span>.log(square.getLength())  <span class="hljs-comment">// 24</span></code></pre><h2 id="七、三种编程方式"><a href="#七、三种编程方式" class="headerlink" title="七、三种编程方式"></a>七、三种编程方式</h2><p>在此举一个简单的例子，要做的需求如下：</p><ul><li>输入一个正方形的边长</li><li>输出它的面积和周长</li></ul><h3 id="1-面对过程编程"><a href="#1-面对过程编程" class="headerlink" title="1. 面对过程编程"></a>1. 面对过程编程</h3><pre><code class="hljs hsp"><span class="hljs-meta"># Python</span><span class="hljs-keyword">width</span> = <span class="hljs-number">5</span>area = <span class="hljs-keyword">width</span>*<span class="hljs-keyword">width</span><span class="hljs-keyword">length</span> = <span class="hljs-keyword">width</span>*<span class="hljs-number">4</span><span class="hljs-keyword">print</span>(<span class="hljs-string">"正方形的面积是%d，周长是%d"</span>%(area,<span class="hljs-keyword">length</span>))  <span class="hljs-meta"># 正方形的面积是<span class="hljs-number">25</span>，周长是<span class="hljs-number">20</span></span>——————————————————————————————————————————————————————————————————————————————<span class="hljs-comment">// JavaScript</span>let <span class="hljs-keyword">width</span> = <span class="hljs-number">6</span>area = <span class="hljs-keyword">width</span>*<span class="hljs-keyword">width</span><span class="hljs-keyword">length</span> = <span class="hljs-keyword">width</span>*<span class="hljs-number">4</span>console.log(`正方形的面积是$&#123;area&#125;，周长是$&#123;<span class="hljs-keyword">length</span>&#125;`)  <span class="hljs-comment">// 正方形的面积是36，周长是24</span></code></pre><h3 id="2-面对对象编程"><a href="#2-面对对象编程" class="headerlink" title="2. 面对对象编程"></a>2. 面对对象编程</h3><pre><code class="hljs maxima"># Pythonclass Square():    def __init__(self,<span class="hljs-built_in">width</span>):        self.<span class="hljs-built_in">width</span> = <span class="hljs-built_in">width</span>    def getAreaLength(self):        area = self.<span class="hljs-built_in">width</span>*self.<span class="hljs-built_in">width</span>        <span class="hljs-built_in">length</span> = self.<span class="hljs-built_in">width</span>*<span class="hljs-number">4</span>        <span class="hljs-built_in">print</span>(<span class="hljs-string">"正方形的面积是%d，周长是%d"</span><span class="hljs-symbol">%</span>(area,<span class="hljs-built_in">length</span>))square = Square(<span class="hljs-number">5</span>)square.getAreaLength()  # 正方形的面积是<span class="hljs-number">25</span>，周长是<span class="hljs-number">20</span>———————————————————————————————————————————————————————// JavaScriptclass Square&#123;    constructor(<span class="hljs-built_in">width</span>)&#123;        this.<span class="hljs-built_in">width</span> = <span class="hljs-built_in">width</span>    &#125;    getAreaLength()&#123;        <span class="hljs-built_in">let</span> area = this.<span class="hljs-built_in">width</span>*this.<span class="hljs-built_in">width</span>        <span class="hljs-built_in">let</span> <span class="hljs-built_in">length</span> = this.<span class="hljs-built_in">width</span>*<span class="hljs-number">4</span>        console.<span class="hljs-built_in">log</span>(`正方形的面积是$&#123;area&#125;，周长是$&#123;<span class="hljs-built_in">length</span>&#125;`)    &#125;&#125;<span class="hljs-built_in">let</span> square = <span class="hljs-built_in">new</span> Square(<span class="hljs-number">6</span>)square.getAreaLength()  // 正方形的面积是<span class="hljs-number">36</span>，周长是<span class="hljs-number">24</span></code></pre><h3 id="3-面对函数编程"><a href="#3-面对函数编程" class="headerlink" title="3. 面对函数编程"></a>3. 面对函数编程</h3><pre><code class="hljs hsp"><span class="hljs-meta"># Python</span>def getAreaLength(<span class="hljs-keyword">width</span>):    area = <span class="hljs-keyword">width</span>*<span class="hljs-keyword">width</span>    <span class="hljs-keyword">length</span> = <span class="hljs-keyword">width</span>*<span class="hljs-number">4</span>    <span class="hljs-keyword">print</span>(<span class="hljs-string">"正方形的面积是%d，周长是%d"</span>%(area,<span class="hljs-keyword">length</span>))getAreaLength(<span class="hljs-number">5</span>)  <span class="hljs-meta"># 正方形的面积是<span class="hljs-number">25</span>，周长是<span class="hljs-number">20</span></span>————————————————————————————————————————————————————————————<span class="hljs-comment">// JavaScript</span>function getAreaLength(<span class="hljs-keyword">width</span>)&#123;let area = <span class="hljs-keyword">width</span>*<span class="hljs-keyword">width</span>    let <span class="hljs-keyword">length</span> = <span class="hljs-keyword">width</span>*<span class="hljs-number">4</span>    console.log(`正方形的面积是$&#123;area&#125;，周长是$&#123;<span class="hljs-keyword">length</span>&#125;`)&#125;getAreaLength(<span class="hljs-number">6</span>)  <span class="hljs-comment">// 正方形的面积是36，周长是24</span></code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法</title>
    <link href="/2020/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2020/04/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>数据结构与算法是一门大课，这里蜻蜓点水一样把学到的知识过一下，内容包括简介、理解、数据结构、算法。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p><strong>算法</strong>是计算方法，解决问题之道，有光子计算、DNA 计算、量子计算等等</p><p><strong>数据结构</strong>是对 ADT 的具体实现</p><p><strong>ADT</strong> 对数据实现“逻辑”层次和“物理”层次的分离</p><p><strong>数据结构 + 算法 = 程序</strong></p><h2 id="二、理解"><a href="#二、理解" class="headerlink" title="二、理解"></a>二、理解</h2><h3 id="1-抽象的例子"><a href="#1-抽象的例子" class="headerlink" title="1. 抽象的例子"></a>1. 抽象的例子</h3><p>用“逻辑 Logical”和“物理 Physical”两种层次看待汽车</p><ul><li>修理工看汽车看到的是“物理”层次，<strong>通过</strong>机械原理等<strong>实现</strong>方向盘、油门等<strong>接口</strong></li><li>老司机看汽车看到的是“逻辑”层次，<strong>使用</strong>方向盘、油门等<strong>接口</strong>做其他事情</li></ul><p>**<br>先要理解这两个东西</p><ol><li>在编程中，编程语言提供了“控制结构”和“数据类型”</li><li>抽象数据类型（ADT：Abstract Data Type）是对数据处理的逻辑描述</li></ol><h3 id="2-抽象的角度看-ADT"><a href="#2-抽象的角度看-ADT" class="headerlink" title="2. 抽象的角度看 ADT"></a>2. 抽象的角度看 ADT</h3><p>用“逻辑 Logical”和“物理 Physical”两种层次看待 ADT</p><ul><li><strong>通过</strong>编程语言的“控制结构”和“数据类型”<strong>实现</strong> 各类 ADT <strong>接口</strong></li><li>算法<strong>使用</strong>各类 ADT <strong>接口</strong>做各种计算</li></ul><h3 id="3-数据结构和-ADT-关系"><a href="#3-数据结构和-ADT-关系" class="headerlink" title="3. 数据结构和 ADT 关系"></a>3. 数据结构和 ADT 关系</h3><p>同一ADT可以采用不同的数据结构来实现，采用程序设计语言的<strong>控制结构</strong>和<strong>基本数据类型</strong>来实现ADT所提供的<strong>逻辑接口</strong>——属于ADT的“物理”层次</p><h2 id="三、数据结构"><a href="#三、数据结构" class="headerlink" title="三、数据结构"></a>三、数据结构</h2><p><strong>线性结构</strong></p><ul><li>栈（Stack）：后进先出</li><li>队列（Queue）：先进先出</li><li>双端队列（Deque）：能够两端进、两端出</li><li>无序表：无顺序的数据</li><li>有序表：有顺序的数据</li><li>映射（Map）：常使用散列表（哈希表）</li></ul><p><strong>非线性结构</strong></p><ul><li>树（Tree）</li><li>堆（Heap）</li><li>图</li></ul><h2 id="四、算法"><a href="#四、算法" class="headerlink" title="四、算法"></a>四、算法</h2><p><strong>排序算法</strong></p><ol><li>冒泡排序</li><li>选择排序</li><li>插入排序</li><li>谢尔排序</li><li>归并排序</li><li>快速排序</li></ol><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2020/04/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/04/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>正则表达式的相关知识，内容包括简介。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>正则表达式就是记录文本规则的代码，用途可以是“查找”、“替换”、“编辑”</p><p>不多 BB，把常用规则背下来<br>_<br><em>参考链接：</em><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener"><em>点击这里</em></a><br>_<br><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub</title>
    <link href="/2020/04/25/GitHub/"/>
    <url>/2020/04/25/GitHub/</url>
    
    <content type="html"><![CDATA[<p>GitHub 的相关知识，内容包括简介、配置 SSH Key、配置域名、上传代码并设置 Pages、GitHub 的代替品。</p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>GitHub 是通过 Git 进行版本控制的软件源代码托管服务平台。</p><p>官网：→ <a href="https://github.com/" target="_blank" rel="noopener"><em>点击这里</em></a></p><ol><li>配置 SSH Key</li><li>可以配置域名</li><li>上传代码并设置 Pages</li></ol><h2 id="二、配置-SSH-Key"><a href="#二、配置-SSH-Key" class="headerlink" title="二、配置 SSH Key"></a>二、配置 SSH Key</h2><p>GitHub 有生成 SSH Key 帮助文档：→ <a href="https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener"><em>点击这里</em></a></p><p>「Settings」→「SSH and GPG keys」→「New SSH key」→「Title: &lt;给设备取名字&gt;」+「Key: &lt;公钥&gt;」</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1587104930810-ac6afdda-bd9d-4d8a-998d-750036cb6074.png#align=left&display=inline&height=290&margin=%5Bobject%20Object%5D&name=image.png&originHeight=536&originWidth=1251&size=43836&status=done&style=none&width=678" srcset="/img/loading.gif" alt="image.png"></p><h2 id="三、配置域名"><a href="#三、配置域名" class="headerlink" title="三、配置域名"></a>三、配置域名</h2><p>如果自己购买了域名，可以自己配置域名。</p><p><strong>注意：</strong>自己做的博客主页的仓库名必须是 <strong>&lt;用户名&gt;.github.io</strong></p><ol><li>在 GitHub Pages 的 Custom domain 写上自己的域名。</li><li>设置顶级域，在自己的域名上创建四条 A 记录 → <a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" target="_blank" rel="noopener"><em>GitHub 顶级域设置教程</em></a><pre><code class="hljs accesslog"><span class="hljs-number">185.199.108.153</span><span class="hljs-number">185.199.109.153</span><span class="hljs-number">185.199.110.153</span><span class="hljs-number">185.199.111.153</span></code></pre>可以使用 nslookup &lt;域名&gt; 查看域名是否生效了<br><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1587108392758-97ff8087-45c8-4f44-bdd8-67f515e9b830.png#align=left&display=inline&height=197&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=1243&size=37265&status=done&style=none&width=746" srcset="/img/loading.gif" alt="image.png"></li></ol><h2 id="四、上传代码并设置-Pages"><a href="#四、上传代码并设置-Pages" class="headerlink" title="四、上传代码并设置 Pages"></a>四、上传代码并设置 Pages</h2><pre><code class="hljs angelscript">git remote add origin <span class="hljs-symbol">git@</span>github.com:mcx2020/webpack-demo<span class="hljs-number">-1.</span>gitgit push -u origin master</code></pre><p>「Settings」→「GitHub Pages」</p><h2 id="五、GitHub-的代替品"><a href="#五、GitHub-的代替品" class="headerlink" title="五、GitHub 的代替品"></a>五、GitHub 的代替品</h2><ol><li>gitee.com（码云）→ <a href="https://gitee.com/" target="_blank" rel="noopener"><em>点击这里</em></a></li><li>coding.net（腾讯战略投资）→ <a href="https://coding.net/" target="_blank" rel="noopener"><em>点击这里</em></a></li><li>gitlab.com → <a href="https://about.gitlab.com/" target="_blank" rel="noopener"><em>点击这里</em></a></li></ol><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>域名和服务器</title>
    <link href="/2020/04/25/%E5%9F%9F%E5%90%8D%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2020/04/25/%E5%9F%9F%E5%90%8D%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>域名和服务器的配置，内容包括域名、服务器。</p><p>最近被安利了一波，我的域名和服务器都是在阿里云上购买的。</p><p>阿里云官网：→ <a href="https://cn.aliyun.com/" target="_blank" rel="noopener"><em>点击这里</em></a><br>_</p><h2 id="一、域名"><a href="#一、域名" class="headerlink" title="一、域名"></a>一、域名</h2><h3 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1. 购买域名"></a>1. 购买域名</h3><p>找到「域名」，跟淘宝购物一样，先选择好域名，然后加入购物车购买。</p><p>进入域名控制台，可以看到自己购买的域名。</p><h3 id="2-配置-DNS"><a href="#2-配置-DNS" class="headerlink" title="2. 配置 DNS"></a>2. 配置 DNS</h3><p>复制粘贴 IP 到 域名里</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1587108392758-97ff8087-45c8-4f44-bdd8-67f515e9b830.png#align=left&display=inline&height=328&margin=%5Bobject%20Object%5D&originHeight=328&originWidth=1243&status=done&style=none&width=1243" srcset="/img/loading.gif" alt=""></p><p>过一段时间可以使用 nslookup &lt;域名&gt; 查看域名是否生效了</p><pre><code class="hljs xml">nslookup <span class="hljs-tag">&lt;<span class="hljs-name">域名</span>&gt;</span></code></pre><h2 id="二、服务器"><a href="#二、服务器" class="headerlink" title="二、服务器"></a>二、服务器</h2><h3 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h3><p>找到「云服务器 ECS」，Elastic Compute Server（弹性计算服务器）。如果提示充值，就要提示要求充值。</p><ol><li>计费方式：按量计费</li><li>地域：&lt;选择国内的（选最优惠的）</li><li>分类：入门级 → 选最优惠的</li><li>Ubuntu 18.04 64位</li><li>带宽降到最低</li><li>最后点击创建实例</li></ol><p>进入 ECS 控制台，可以看到自己购买的服务器</p><h3 id="2-配置端口和重置实例密码"><a href="#2-配置端口和重置实例密码" class="headerlink" title="2. 配置端口和重置实例密码"></a>2. 配置端口和重置实例密码</h3><p><strong>设置安全组</strong></p><p>「实例列表」→「更多」→「网络和安全组」→「安全组配置」→「配置规则」→「添加安全组规则」→「端口：8888/8888」+ 「授权对象：0.0.0.0/0」</p><p><strong>重置实例密码</strong></p><p>「实例列表」→「更多」→「密码/密钥」→「重置实例密码」</p><p><strong>远程连接</strong></p><p>点击远程连接进入服务器，第一次进入会出现一次远程连接密码，把这个密码记下来。为了方便记得密码，把这个密码记录在实例的标签上。</p><h3 id="3-进入服务器配置-SSH-Key"><a href="#3-进入服务器配置-SSH-Key" class="headerlink" title="3. 进入服务器配置 SSH Key"></a>3. 进入服务器配置 SSH Key</h3><p>「实例列表」→「远程连接」→「操作系统用户名：<root>」+「密码：&lt;实例密码&gt;」</p><p>将公钥内容添加到 authorized_keys 中</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> <span class="hljs-string">"&lt;公钥&gt;"</span> &gt;&gt; ~<span class="hljs-string">/.ssh/authorized_keys</span></code></pre><p>做完这一步，就可以在自己电脑上通过 SSH Key 远程登录到服务器了</p><p>ssh root@&lt;实例 ip&gt;，实例 ip 记不住怎么办，把 ip 记录到 hosts 中</p><pre><code class="hljs dts"><span class="hljs-comment">// hosts 文件</span><span class="hljs-params">&lt;实例 ip&gt;</span> aliyun</code></pre><p>这样就在 Cmder 上登录和退出服务器，对我而言把 ip 记录到 hosts 的意义不大，因为当我关闭服务器后，这个 ip 会被回收，当下次再登录的时候 ip 地址会改变。</p><pre><code class="hljs awk">ssh root@aliyun<span class="hljs-keyword">exit</span> 或者 logout</code></pre><h3 id="4-创建账户"><a href="#4-创建账户" class="headerlink" title="4. 创建账户"></a>4. 创建账户</h3><p>最好不要一直使用 root 账户做操作，因为 root 账户权限太大，有可能发生不好的事情，这时候需要创建一个权限小一点的账户。</p><pre><code class="hljs groovy">adduser eddiemamkdir  <span class="hljs-regexp">/home/</span>eddiema/.sshcp <span class="hljs-regexp">~/.ssh/</span>authorized_keys <span class="hljs-regexp">/home/</span>eddiema<span class="hljs-regexp">/.ssh/</span>chmod <span class="hljs-number">755</span> <span class="hljs-regexp">/home/</span>eddiema<span class="hljs-regexp">/.ssh/</span>authorized_keyschown <span class="hljs-string">eddiema:</span>eddiema <span class="hljs-regexp">/home/</span>eddiema<span class="hljs-regexp">/.ssh/</span>authorized_keys</code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="5-给账户添加-sudo"><a href="#5-给账户添加-sudo" class="headerlink" title="5. 给账户添加 sudo"></a>5. 给账户添加 sudo</h3><p>在 root 账户下运行</p><pre><code class="hljs armasm"><span class="hljs-keyword">adduser </span>eddiema sudo</code></pre><p>在 eddiema 账户下「以管理员什么运行」</p><pre><code class="hljs xml">sudo <span class="hljs-tag">&lt;<span class="hljs-name">命令</span>&gt;</span></code></pre><h3 id="6-安装软件"><a href="#6-安装软件" class="headerlink" title="6. 安装软件"></a>6. 安装软件</h3><p>安装 node.js</p><pre><code class="hljs vim">curl -sL http<span class="hljs-variable">s:</span>//<span class="hljs-keyword">deb</span>.nodesource.<span class="hljs-keyword">com</span>/setup_8.<span class="hljs-keyword">x</span> | sudo bash -sudo sed -i <span class="hljs-string">'s/deb.nodesource.com\/node_8.x/mirrors.tuna.tsinghua.edu.cn\/nodesource\/deb_8.x/g'</span> /etc/apt/sources.<span class="hljs-keyword">list</span>.d/nodesource.<span class="hljs-keyword">list</span>sudo apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span>sudo apt-<span class="hljs-built_in">get</span> install -<span class="hljs-keyword">y</span> nodejsnode -vnpm -vnpx -v</code></pre><p>安装 git</p><pre><code class="hljs properties"><span class="hljs-attr">sudo</span> <span class="hljs-string">apt install git</span><span class="hljs-attr">git</span> <span class="hljs-string">--version</span></code></pre><h3 id="5-防止-SSH-卡住"><a href="#5-防止-SSH-卡住" class="headerlink" title="5. 防止 SSH 卡住"></a>5. 防止 SSH 卡住</h3><p>在本地机器运行以下命令（注：不是在远程服务器）</p><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> <span class="hljs-string">"Host *"</span> &gt;&gt; <span class="hljs-string">/etc/ssh/ssh_config</span><span class="hljs-keyword">echo</span> <span class="hljs-string">"  ServerAliveInterval 30"</span> &gt;&gt; <span class="hljs-string">/etc/ssh/ssh_config</span></code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2020/04/24/HTTP/"/>
    <url>/2020/04/24/HTTP/</url>
    
    <content type="html"><![CDATA[<p>HTTP 的相关知识，内容包括 URL、IP、域名、端口页面请求、HTTP 请求和响应、Curl 命令制造请求、HTTP 缓存、其他知识。</p><h2 id="一、URL"><a href="#一、URL" class="headerlink" title="一、URL"></a>一、URL</h2><p>什么是 URL ？URL 的全称是 Uniform Resource Locator， 统一资源定位服务，能够定位到一个设备给我们提供的服务，由以下几个部分组成。</p><p>协议 + 域名或 IP + 端口号 + 路径 + 查询字符串 + 锚点</p><h2 id="二、IP、域名、端口"><a href="#二、IP、域名、端口" class="headerlink" title="二、IP、域名、端口"></a>二、IP、域名、端口</h2><h3 id="1-IP-和域名"><a href="#1-IP-和域名" class="headerlink" title="1. IP 和域名"></a>1. IP 和域名</h3><p>什么是 IP ？IP 全称 Internet Protocol，互联网协议。只要在互联网中，就至少有一个独特的 IP。</p><p>域名是对 IP 的别称，通过 DNS，Domain Name Server/System 将域名和 IP 对应起来。</p><ol><li>一个域名可以对应不同 IP，这个叫均衡负载，防止一台机器扛不住</li><li>一个 IP 可以对应不同域名，这个叫做共享主机</li></ol><h3 id="2-IP-分为内网和外网"><a href="#2-IP-分为内网和外网" class="headerlink" title="2. IP 分为内网和外网"></a>2. IP 分为内网和外网</h3><ol><li>路由器连上电信的服务器，那么路由器就会有一个「外网 IP」</li><li>路由器会在家中创建一个内网，内网中的设备使用「内网 IP」，一般来说这个 IP 的格式都是 192.168.xxx.xxx</li></ol><h3 id="3-获取-查询-IP"><a href="#3-获取-查询-IP" class="headerlink" title="3. 获取/查询 IP"></a>3. 获取/查询 IP</h3><p>这个网站可以获取到自己现在上网的「外网 IP」→ <a href="https://ip138.com/" target="_blank" rel="noopener"><em>https://ip138.com/</em></a><br>_<br>ping 命令用于测试网络是否连通</p><pre><code class="hljs autoit"><span class="hljs-built_in">ping</span> baidu.com</code></pre><p>nslookup 命令用于查询 DNS 的记录，查看域名解析是否正常</p><pre><code class="hljs css"><span class="hljs-selector-tag">nslookup</span> <span class="hljs-selector-tag">baidu</span><span class="hljs-selector-class">.com</span></code></pre><h3 id="4-端口"><a href="#4-端口" class="headerlink" title="4. 端口"></a>4. 端口</h3><p>一台机器可以提供很多服务，一个服务就是一个端口，拥有一个端口号（port）。</p><ol><li>要提供 HTTP 服务最好使用 80 端口</li><li>要提供 HTTPS 服务最好使用 443 端口</li><li>要提供 FTP 服务最好使用 21 端口</li></ol><p>一共 65535 个端口，1 到 1023（2 的 10 次方减 1）号端口留给系统使用的，其他端口可以留给普通用户使用</p><h2 id="三、页面请求"><a href="#三、页面请求" class="headerlink" title="三、页面请求"></a>三、页面请求</h2><p>协议 + 域名 + 路径 + 查询参数</p><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//www.baidu.<span class="hljs-keyword">com</span>/s?wd=hellohttp<span class="hljs-variable">s:</span>//www.google.<span class="hljs-keyword">com</span>/<span class="hljs-built_in">search</span>?q=hello</code></pre><p>协议 + 域名 + 路径 + 锚点</p><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//<span class="hljs-built_in">zh</span>.wikipedia<span class="hljs-meta">.org</span>/wiki/维基百科<span class="hljs-meta">#使用</span></code></pre><p>锚点看起来有中文，实际不支持中文，并且锚点是无法在 Network 面板看到的，它不会传给服务器。</p><h2 id="四、HTTP-请求和响应"><a href="#四、HTTP-请求和响应" class="headerlink" title="四、HTTP 请求和响应"></a>四、HTTP 请求和响应</h2><h3 id="1-HTTP-请求"><a href="#1-HTTP-请求" class="headerlink" title="1. HTTP 请求"></a>1. HTTP 请求</h3><p>有三部分：请求行、请求头、请求体。</p><p>请求动词有 GET / POST / PUT / PATCH / DELETE 等，请求体在 GET 请求中一般为空。</p><pre><code class="hljs groovy">请求动词 路径加查询参数 协议名/版本......<span class="hljs-string">Host:</span> 域名或 <span class="hljs-string">IP:</span> 端口号<span class="hljs-string">Accept:</span> text/htmlContent - <span class="hljs-string">Type:</span> 请求体的格式请求体（也就是上传的内容）</code></pre><h3 id="2-HTTP-响应"><a href="#2-HTTP-响应" class="headerlink" title="2. HTTP 响应"></a>2. HTTP 响应</h3><p>有三部分：状态行、响应头、响应体。</p><pre><code class="hljs routeros">协议名/版本 状态码 状态字符串<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>Content-Type: 响应体格式响应体（也就是下载内容）</code></pre><h2 id="五、Curl-命令构造请求"><a href="#五、Curl-命令构造请求" class="headerlink" title="五、Curl 命令构造请求"></a>五、Curl 命令构造请求</h2><h3 id="1-构造一个简单的请求"><a href="#1-构造一个简单的请求" class="headerlink" title="1. 构造一个简单的请求"></a>1. 构造一个简单的请求</h3><p>-v 参数可以清晰地看到请求和响应</p><pre><code class="hljs groovy">curl <span class="hljs-string">http:</span><span class="hljs-comment">//www.baidu.com</span>curl -v <span class="hljs-string">http:</span><span class="hljs-comment">//www.baidu.com</span></code></pre><p>我们请求 <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> 看看得到什么</p><pre><code class="hljs django"><span class="xml">λ curl -v http://www.baidu.com</span><span class="xml">*   Trying 36.152.44.96:80...</span><span class="xml">* TCP_NODELAY set</span><span class="xml">* Connected to www.baidu.com (36.152.44.96) port 80 (#0)</span><span class="xml">&gt; GET / HTTP/1.1</span><span class="xml">&gt; Host: www.baidu.com</span><span class="xml">&gt; User-Agent: curl/7.67.0</span><span class="xml">&gt; Accept: */*</span><span class="xml">&gt;</span><span class="xml">* Mark bundle as not supporting multiuse</span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">HTTP</span>/<span class="hljs-attr">1.1</span> <span class="hljs-attr">200</span> <span class="hljs-attr">OK</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Accept-Ranges:</span> <span class="hljs-attr">bytes</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Cache-Control:</span> <span class="hljs-attr">private</span>, <span class="hljs-attr">no-cache</span>, <span class="hljs-attr">no-store</span>, <span class="hljs-attr">proxy-revalidate</span>, <span class="hljs-attr">no-transform</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Connection:</span> <span class="hljs-attr">keep-alive</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Content-Length:</span> <span class="hljs-attr">2381</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Content-Type:</span> <span class="hljs-attr">text</span>/<span class="hljs-attr">html</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Date:</span> <span class="hljs-attr">Fri</span>, <span class="hljs-attr">17</span> <span class="hljs-attr">Apr</span> <span class="hljs-attr">2020</span> <span class="hljs-attr">10:23:27</span> <span class="hljs-attr">GMT</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Etag:</span> "<span class="hljs-attr">588604f8-94d</span>"</span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Last-Modified:</span> <span class="hljs-attr">Mon</span>, <span class="hljs-attr">23</span> <span class="hljs-attr">Jan</span> <span class="hljs-attr">2017</span> <span class="hljs-attr">13:28:24</span> <span class="hljs-attr">GMT</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Pragma:</span> <span class="hljs-attr">no-cache</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Server:</span> <span class="hljs-attr">bfe</span>/<span class="hljs-attr">1.0.8.18</span></span></span><span class="xml"><span class="hljs-tag">&lt; <span class="hljs-attr">Set-Cookie:</span> <span class="hljs-attr">BDORZ</span>=<span class="hljs-string">27315;</span> <span class="hljs-attr">max-age</span>=<span class="hljs-string">86400;</span> <span class="hljs-attr">domain</span>=<span class="hljs-string">.baidu.com;</span> <span class="hljs-attr">path</span>=<span class="hljs-string">/</span></span></span><span class="xml"><span class="hljs-tag">&lt;</span></span><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span></span><span class="xml"><span class="hljs-comment">&lt;!--STATUS OK--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">content-type</span> <span class="hljs-attr">content</span>=<span class="hljs-string">text/html;charset</span>=<span class="hljs-string">utf-8</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">X-UA-Compatible</span> <span class="hljs-attr">content</span>=<span class="hljs-string">IE</span>=<span class="hljs-string">Edge</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">content</span>=<span class="hljs-string">always</span> <span class="hljs-attr">name</span>=<span class="hljs-string">referrer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">stylesheet</span> <span class="hljs-attr">type</span>=<span class="hljs-string">text/css</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>百度一下，你就知道<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">bo</span></span></span><span class="xml">dy link=#0000cc&gt; <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">wrapper</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">head</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">head_wrapper</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">s_form</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">s_form_wrapper</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">lg</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">hidefocus</span>=<span class="hljs-string">true</span> <span class="hljs-attr">src</span>=<span class="hljs-string">//www.baidu.com/img/bd_logo1.png</span> <span class="hljs-attr">width</span>=<span class="hljs-string">270</span> <span class="hljs-attr">height</span>=<span class="hljs-string">129</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">f</span> <span class="hljs-attr">action</span>=<span class="hljs-string">//www.baidu.com/s</span> <span class="hljs-attr">class</span>=<span class="hljs-string">fm</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">hidden</span> <span class="hljs-attr">name</span>=<span class="hljs-string">bdorz_come</span> <span class="hljs-attr">value</span>=<span class="hljs-string">1</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">hidden</span> <span class="hljs-attr">name</span>=<span class="hljs-string">ie</span> <span class="hljs-attr">value</span>=<span class="hljs-string">utf-8</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">hidden</span> <span class="hljs-attr">name</span>=<span class="hljs-string">f</span> <span class="hljs-attr">value</span>=<span class="hljs-string">8</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">hidden</span> <span class="hljs-attr">name</span>=<span class="hljs-string">rsv_bp</span> <span class="hljs-attr">value</span>=<span class="hljs-string">1</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">hidden</span> <span class="hljs-attr">name</span>=<span class="hljs-string">rsv_idx</span> <span class="hljs-attr">value</span>=<span class="hljs-string">1</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">hidden</span> <span class="hljs-attr">name</span>=<span class="hljs-string">tn</span> <span class="hljs-attr">value</span>=<span class="hljs-string">baidu</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg s_ipt_wr"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">kw</span> <span class="hljs-attr">name</span>=<span class="hljs-string">wd</span> <span class="hljs-attr">class</span>=<span class="hljs-string">s_ipt</span> <span class="hljs-attr">value</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">255</span> <span class="hljs-attr">autocomplete</span>=<span class="hljs-string">off</span> <span class="hljs-attr">autofocus</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg s_btn_wr"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">submit</span> <span class="hljs-attr">id</span>=<span class="hljs-string">su</span> <span class="hljs-attr">value</span>=<span class="hljs-string">百度一下</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"bg s_btn"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">u1</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://news.baidu.com</span> <span class="hljs-attr">name</span>=</span></span><span class="xml">tj_trnews class=mnav&gt;新闻<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://www.hao123.com</span> <span class="hljs-attr">name</span>=<span class="hljs-string">tj_trhao123</span> <span class="hljs-attr">class</span>=<span class="hljs-string">mnav</span>&gt;</span>hao123<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://map.baidu.com</span> <span class="hljs-attr">name</span>=<span class="hljs-string">tj_trmap</span> <span class="hljs-attr">class</span>=<span class="hljs-string">mnav</span>&gt;</span>地图</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://v.baidu.com</span> <span class="hljs-attr">name</span>=<span class="hljs-string">tj_trvideo</span> <span class="hljs-attr">class</span>=<span class="hljs-string">mnav</span>&gt;</span>视频<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://tieba.baidu.com</span> <span class="hljs-attr">name</span>=<span class="hljs-string">tj_trtieba</span> <span class="hljs-attr">class</span>=<span class="hljs-string">mnav</span>&gt;</span>贴吧<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">htt</span></span></span><span class="xml">p://www.baidu.com/bdorz/login.gif?login<span class="hljs-symbol">&amp;amp;</span>tpl=mn<span class="hljs-symbol">&amp;amp;</span>u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1 name=tj_login class=lb&gt;登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>d</span><span class="xml">ocument.write('<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://www.baidu.com/bdorz/login.gif?login&amp;tpl=mn&amp;u='+ encodeURIComponent(window.location.href+ (window.location.search === "</span>" ? "?" <span class="hljs-attr">:</span> "&amp;")+ "<span class="hljs-attr">bdorz_come</span>=<span class="hljs-string">1</span>")+ '" <span class="hljs-attr">name</span>=<span class="hljs-string">"tj_login"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"lb"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>');<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">//www.baidu.com/more/</span> <span class="hljs-attr">name</span>=<span class="hljs-string">tj_briicon</span> <span class="hljs-attr">class</span>=<span class="hljs-string">bri</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display: block;"</span>&gt;</span></span><span class="xml">更多产品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">ftCon</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">ftConw</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">lh</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://home.baidu.com</span>&gt;</span>关于百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://ir.baidu.com</span>&gt;</span>About Baidu</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">cp</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span>2017<span class="hljs-symbol">&amp;nbsp;</span>Baidu<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://www.baidu.com/duty/</span>&gt;</span>使用百度前必读<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">http://jianyi.baidu.com/</span> <span class="hljs-attr">class</span>=<span class="hljs-string">cp-feedback</span>&gt;</span></span><span class="xml">意见反馈<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span>京ICP证030173号<span class="hljs-symbol">&amp;nbsp;</span> <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">//www.baidu.com/img/gs.gif</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><span class="xml">* Connection #0 to host www.baidu.com left intact</span></code></pre><h3 id="2-设置请求"><a href="#2-设置请求" class="headerlink" title="2. 设置请求"></a>2. 设置请求</h3><p>修改请求动词</p><pre><code class="hljs groovy">curl -v -X POST <span class="hljs-string">https:</span><span class="hljs-comment">//www.baidu.com</span></code></pre><p>设置路径和查询参数</p><pre><code class="hljs groovy">curl -v <span class="hljs-string">https:</span><span class="hljs-comment">//www.baidu.com/s?wd=hello</span></code></pre><p>设置请求头</p><pre><code class="hljs groovy">curl -v -H <span class="hljs-string">"Accept: text/html"</span> <span class="hljs-string">https:</span><span class="hljs-comment">//www.baidu.com</span></code></pre><p>设置请求体内容</p><pre><code class="hljs groovy">curl -v -X POST -H <span class="hljs-string">"Content-Type: text/plain;charset=utf-8"</span> -d <span class="hljs-string">"请求体内容"</span> <span class="hljs-string">https:</span><span class="hljs-comment">//www.baidu.com</span></code></pre><h2 id="六、HTTP-缓存"><a href="#六、HTTP-缓存" class="headerlink" title="六、HTTP 缓存"></a>六、HTTP 缓存</h2><p>缓存是跟着文件名走的，在响应头里可以看到缓存时间</p><pre><code class="hljs lasso">Response <span class="hljs-keyword">Header</span><span class="hljs-keyword">Cache</span><span class="hljs-params">-Control</span>:<span class="hljs-keyword">public</span>, <span class="hljs-keyword">max</span><span class="hljs-params">-age</span>=<span class="hljs-number">31536000</span></code></pre><h2 id="七、其他知识"><a href="#七、其他知识" class="headerlink" title="七、其他知识"></a>七、其他知识</h2><p>浏览器标签最右侧的圈圈：逆时针转表示在请求，顺时针转表示在下载</p><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git 命令</title>
    <link href="/2020/04/24/Git%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/04/24/Git%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>自己使用的常用 Git 命令，内容包括 Git 配置、基本操作、切换版本、创建分支、合并分支、提交到远程仓库、高级操作。</p><h2 id="一、Git-配置"><a href="#一、Git-配置" class="headerlink" title="一、Git 配置"></a>一、Git 配置</h2><h3 id="1-六行配置"><a href="#1-六行配置" class="headerlink" title="1. 六行配置"></a>1. 六行配置</h3><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name &lt;名字&gt;git<span class="hljs-built_in"> config </span>--global user.email &lt;邮箱&gt;git<span class="hljs-built_in"> config </span>--global push.default simplegit<span class="hljs-built_in"> config </span>--global core.quotepath <span class="hljs-literal">false</span>git<span class="hljs-built_in"> config </span>--global core.editor <span class="hljs-string">"code --wait"</span>git<span class="hljs-built_in"> config </span>--global core.autocrlf input</code></pre><h3 id="2-查看配置"><a href="#2-查看配置" class="headerlink" title="2. 查看配置"></a>2. 查看配置</h3><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --list</code></pre><h3 id="3-删除配置"><a href="#3-删除配置" class="headerlink" title="3. 删除配置"></a>3. 删除配置</h3><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --unset &lt;配置的名字&gt;</code></pre><h2 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h2><h3 id="1-初始化一个空的-Git-仓库"><a href="#1-初始化一个空的-Git-仓库" class="headerlink" title="1. 初始化一个空的 Git 仓库"></a>1. 初始化一个空的 Git 仓库</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">git init</span></code></pre><h3 id="2-忽略提交特定的文件-夹"><a href="#2-忽略提交特定的文件-夹" class="headerlink" title="2. 忽略提交特定的文件(夹)"></a>2. 忽略提交特定的文件(夹)</h3><p>在目录新建一个 .gitignore 目录，将想要忽略提交的内容添加即可</p><pre><code class="hljs jboss-cli"><span class="hljs-string">/index.html</span><span class="hljs-string">/style.css</span></code></pre><h3 id="3-提交代码一键三连"><a href="#3-提交代码一键三连" class="headerlink" title="3. 提交代码一键三连"></a>3. 提交代码一键三连</h3><ol><li>查看文件处于什么状态</li><li>将内容从工作目录添加到暂存区</li><li>将暂存区里的改动提交到本地的版本库</li></ol><pre><code class="hljs pgsql">git statusgit <span class="hljs-keyword">add</span> .git <span class="hljs-keyword">commit</span> -m "&lt;字符串&gt;"  / git <span class="hljs-keyword">commit</span> -v</code></pre><h2 id="三、切换版本"><a href="#三、切换版本" class="headerlink" title="三、切换版本"></a>三、切换版本</h2><h3 id="1-查看版本历史"><a href="#1-查看版本历史" class="headerlink" title="1. 查看版本历史"></a>1. 查看版本历史</h3><p>查看正常迭代的版本历史</p><pre><code class="hljs 1c">git <span class="hljs-built_in">log</span></code></pre><p>所有分支的所有操作记录</p><pre><code class="hljs angelscript">git <span class="hljs-built_in">ref</span>log</code></pre><p>按 “Q” 回到命令行</p><h3 id="2-切换版本"><a href="#2-切换版本" class="headerlink" title="2. 切换版本"></a>2. 切换版本</h3><p>根据版本号切换版本</p><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard &lt;版本号&gt;</span></code></pre><p>切换到上一个版本</p><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard HEAD</span></code></pre><p>按 “Q” 回到命令行</p><h2 id="四、创建分支"><a href="#四、创建分支" class="headerlink" title="四、创建分支"></a>四、创建分支</h2><h3 id="1-创建一个新分支"><a href="#1-创建一个新分支" class="headerlink" title="1. 创建一个新分支"></a>1. 创建一个新分支</h3><p>创建一个分支</p><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">branch </span>&lt;分支名&gt;</code></pre><h3 id="2-切换分支"><a href="#2-切换分支" class="headerlink" title="2. 切换分支"></a>2. 切换分支</h3><pre><code class="hljs xml">git checkout <span class="hljs-tag">&lt;<span class="hljs-name">分支名</span>&gt;</span></code></pre><p>切换到上一个分支</p><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> checkout -</code></pre><h2 id="五、合并分支"><a href="#五、合并分支" class="headerlink" title="五、合并分支"></a>五、合并分支</h2><h3 id="1-合并分支"><a href="#1-合并分支" class="headerlink" title="1. 合并分支"></a>1. 合并分支</h3><p>到达你想要保留的那个分支，并确定要合并的分支</p><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span>git merge x</code></pre><p>有冲突解决冲突，打开冲突文件，做优化</p><p>查看冲突文件，-sb 让查看界面更简洁</p><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> status -<span class="hljs-built_in">sb</span></code></pre><h3 id="2-提交代码"><a href="#2-提交代码" class="headerlink" title="2. 提交代码"></a>2. 提交代码</h3><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .</span>git commit</code></pre><p>这里 commit 后面不需要加任何内容，它会自动添加提交的内容</p><h3 id="3-删除原来的无用分支"><a href="#3-删除原来的无用分支" class="headerlink" title="3. 删除原来的无用分支"></a>3. 删除原来的无用分支</h3><p>先查看分支，-d 的意思是 delete</p><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> <span class="hljs-keyword">branch</span><span class="hljs-keyword">git </span><span class="hljs-keyword">branch </span>-d x</code></pre><h2 id="六、提交到远程仓库"><a href="#六、提交到远程仓库" class="headerlink" title="六、提交到远程仓库"></a>六、提交到远程仓库</h2><h3 id="1-提交到-GitHub-远程仓库"><a href="#1-提交到-GitHub-远程仓库" class="headerlink" title="1. 提交到 GitHub 远程仓库"></a>1. 提交到 GitHub 远程仓库</h3><p>先新建一个远程仓库，复制粘贴运行以下命令，origin 是给远程仓库取的名字，可以修改的</p><pre><code class="hljs angelscript">git remote add origin <span class="hljs-symbol">git@</span>github.com:mcx2020/webpack-demo<span class="hljs-number">-1.</span>gitgit push -u origin master</code></pre><p>push 的杀手锏，强制 push（不要轻易使用）</p><pre><code class="hljs crmsh">git push -u origin <span class="hljs-keyword">master</span> <span class="hljs-title">-f</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2-提交到码云远程仓库"><a href="#2-提交到码云远程仓库" class="headerlink" title="2. 提交到码云远程仓库"></a>2. 提交到码云远程仓库</h3><pre><code class="hljs groovy">git remote add gitee git<span class="hljs-meta">@gitee</span>.<span class="hljs-string">com:</span>mcx2020/webpack-demo<span class="hljs-number">-1.</span>gitgit push gitee gh-<span class="hljs-string">pages:</span>master</code></pre><p>将本地的 gh-pages 分支提交到远程仓库的 master 分支</p><h3 id="3-查看添加的远程仓库"><a href="#3-查看添加的远程仓库" class="headerlink" title="3. 查看添加的远程仓库"></a>3. 查看添加的远程仓库</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote -v</span></code></pre><h3 id="4-换仓库提交"><a href="#4-换仓库提交" class="headerlink" title="4. 换仓库提交"></a>4. 换仓库提交</h3><p>提交的时候，如果想换仓库，将 add 改成 set-url</p><pre><code class="hljs dsconfig"><span class="hljs-string">git </span><span class="hljs-string">remote </span><span class="hljs-built_in">set-url</span> <span class="hljs-string">origin </span><span class="hljs-string">git@</span><span class="hljs-string">github.</span><span class="hljs-string">com:mcx2020/</span><span class="hljs-string">webpack-demo-</span>2.<span class="hljs-string">git</span><span class="hljs-string">git </span><span class="hljs-string">push </span>-u <span class="hljs-string">origin </span><span class="hljs-string">master</span></code></pre><h2 id="七、下载远程仓库"><a href="#七、下载远程仓库" class="headerlink" title="七、下载远程仓库"></a>七、下载远程仓库</h2><h3 id="1-下载代码"><a href="#1-下载代码" class="headerlink" title="1. 下载代码"></a>1. 下载代码</h3><p>别人的代码只能使用 https 下载，自己的代码可是使用 ssh 下载，下载形式有变形。</p><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@<span class="hljs-tag">&lt;目标路径&gt;</span>git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@<span class="hljs-tag">&lt;目标路径&gt;</span> yyygit <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@<span class="hljs-tag">&lt;目标路径&gt;</span> .</code></pre><h2 id="八、高级操作"><a href="#八、高级操作" class="headerlink" title="八、高级操作"></a>八、高级操作</h2><h3 id="1-通灵术"><a href="#1-通灵术" class="headerlink" title="1. 通灵术"></a>1. 通灵术</h3><p>将所有未提交的代码隐藏存储起来，再切换分支弹出来</p><pre><code class="hljs gauss">git stash<span class="hljs-comment">// 切换一下分支</span>git stash <span class="hljs-keyword">pop</span></code></pre><h3 id="2-设置页面预览的脚本"><a href="#2-设置页面预览的脚本" class="headerlink" title="2. 设置页面预览的脚本"></a>2. 设置页面预览的脚本</h3><p>将打包好的 dist 中的文件上传到新的分支进行预览</p><pre><code class="hljs smali">git branch <span class="hljs-string">"gh-pages"</span>git<span class="hljs-built_in"> check-out </span>gh-pages// 将已经删除源代码的代码提交git<span class="hljs-built_in"> add </span>.git commit -m <span class="hljs-string">"rm source code"</span>git push --set-upstream origin gh-pages</code></pre><p>在 master 分支上做一个脚本</p><pre><code class="hljs 1c"><span class="hljs-comment">// deploy.sh</span>yarn build <span class="hljs-meta">&amp;&amp;</span>git checkout gh-pages <span class="hljs-meta">&amp;&amp;</span>rm -f *.html *.js *.css <span class="hljs-meta">&amp;&amp;</span>mv dist/* ./ <span class="hljs-meta">&amp;&amp;</span>rm -rf dist;git add . <span class="hljs-meta">&amp;&amp;</span>git commit -m 'update' <span class="hljs-meta">&amp;&amp;</span>git push <span class="hljs-meta">&amp;&amp;</span>git checkout -</code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>命令行</title>
    <link href="/2020/04/24/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <url>/2020/04/24/%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>命令行的相关知识，内容包括概念理解、环境变量、添加新命令、JS 相关命令、Python 相关命令。</p><h2 id="一、概念理解"><a href="#一、概念理解" class="headerlink" title="一、概念理解"></a>一、概念理解</h2><h3 id="1-shell-是什么？"><a href="#1-shell-是什么？" class="headerlink" title="1. shell 是什么？"></a>1. shell 是什么？</h3><p>shell 是用来解决用户如何与操作系统通信的问题。shell 是壳，提供给用户使用界面，区别于 kernel（系统内核）</p><p>shell 负责和用户打交道，kernel 负责和硬件打交道</p><p>我正在使用的 Windows 10 操作系统的 kernel 是 Windows NT（Windows 9X 系列的核是 DOS），shell 有两个，分别是 Windows Explorer 和 cmd.exe</p><p><strong>两种形式的 shell</strong></p><ol><li>图形界面 shell（Graphical User Interface shell ，即 GUI shell）</li><li>命令行 shell（Command Line Interface shell ，即CLI shell）</li></ol><p>如果不特别说明，通常所说的 shell 是指命令行 shell</p><ul><li>Linux 中 Bash 是 shell 的一种，最常用的 shell 之一</li><li>Windows 中的 Windows命令提示符（cmd.exe）也是一种 shell</li></ul><h3 id="2-Git-是什么？"><a href="#2-Git-是什么？" class="headerlink" title="2. Git 是什么？"></a>2. Git 是什么？</h3><p>Git 是一款免费、开源的分布式版本控制系统</p><p>Github 是用 Git 做版本控制的代码托管平台</p><p>Git 命令在 Linux 下可以直接运行</p><p>Git Bash 是Git 公司推出的一个 Bash</p><h3 id="3-不同系统下使用-git-命令"><a href="#3-不同系统下使用-git-命令" class="headerlink" title="3. 不同系统下使用 git 命令"></a>3. 不同系统下使用 git 命令</h3><p><strong>Windows 系统：</strong> 需要重新下载一个 Git Bash，不使用 Windows 自带的 Shell</p><ul><li>Cmder 是个不错的命令行控制台工具，附带了 Git Bash，即拥有了 git 命令</li></ul><p><strong>Linux 系统：</strong> 可以直接使用 git 命令</p><p><strong>Mac 系统：</strong> 可以直接使用 git 命令</p><h2 id="二、环境变量"><a href="#二、环境变量" class="headerlink" title="二、环境变量"></a>二、环境变量</h2><p>当一个可执行文件添加到了环境变量 PATH，那么它就可以在命令行里调用并使用，PATH 就是用来搜索程序在哪里的</p><p>「系统」→「高级系统设置」→「环境变量」→「PATH: 可执行文件目录」</p><p>Cmder 下的 Bash 比 Windows 命令提示符功能更强大，语法也不一样，以后直接使用 Cmder 下的 Bash</p><h2 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h2><h3 id="1-增"><a href="#1-增" class="headerlink" title="1. 增"></a>1. 增</h3><ol><li>创建一个文件</li><li>创建多个文件 「touch 1.txt 2.txt 3.txt」</li><li>添加一行内容到文件（会覆盖） 「echo mmp &gt; 1.txt」</li><li>追加一行内容到文件（不会覆盖） 「echo mmp &gt;&gt; 1.txt」</li><li>追加两行内容到文件 「echo -e “mmp\nmmp” &gt;&gt; 1.txt」</li><li>创建一个目录 「mkdir a」</li><li>创建多个目录 「mkdir a b c」</li><li>创建多层目录 「mkdir -p a/b/c/d/e」</li><li>复制文件 「cp 1.txt 2.txt」</li><li>复制路径 「cp -r a b」</li></ol><h3 id="2-删"><a href="#2-删" class="headerlink" title="2. 删"></a>2. 删</h3><ol><li>删除一个文件 「rm 1.txt」</li><li>删除一个目录 「rm -r a」/「rm -rf a」</li></ol><h3 id="3-改"><a href="#3-改" class="headerlink" title="3. 改"></a>3. 改</h3><ol><li>改变当前目录 「cd &lt;路径&gt;」</li><li>用程序打开文件 「start 1.txt」/「code 1.txt」</li><li>清空文件 「echo ‘’ &gt; 1.txt」</li><li>移动文件/目录 「mv &lt;路径1&gt; &lt;路径2&gt;」</li><li>重命名文件/目录（同上） 「mv &lt;名字1&gt; &lt;名字2&gt;」</li><li>修改文件最后更新时间 「touch 1.txt」</li></ol><h3 id="4-查"><a href="#4-查" class="headerlink" title="4. 查"></a>4. 查</h3><ol><li>查看当前目录的绝对路径 「pwd」</li><li>查看当前目录内容 「ls」</li><li>查看当前目录详细内容 「ls -l」</li><li>查看指定目录内容 「ls &lt;路径&gt;」</li><li>查看文件 「cat  / less &lt;路径&gt;」/「head / tail &lt;路径&gt; [-n 14]」</li><li>查看上一个命令错误的代号 「echo $?」</li><li>查看命令路径 「which &lt;命令&gt;」</li></ol><h3 id="5-其他命令"><a href="#5-其他命令" class="headerlink" title="5. 其他命令"></a>5. 其他命令</h3><ol><li>「clear」 清屏</li><li>「&lt;命令&gt; –help」 查询命令用法</li><li>「tldr &lt;命令&gt;」 查询命令常见用法</li></ol><h3 id="6-常用快捷键"><a href="#6-常用快捷键" class="headerlink" title="6. 常用快捷键"></a>6. 常用快捷键</h3><ol><li>「Ctrl + C」 – 中断当前命令</li><li>「Ctrl + A」 – 光标移动到最前面</li><li>「Ctrl + E」 – 光标移动到最后面</li></ol><h2 id="四、脚本文件"><a href="#四、脚本文件" class="headerlink" title="四、脚本文件"></a>四、脚本文件</h2><h3 id="1-命令组合"><a href="#1-命令组合" class="headerlink" title="1. 命令组合"></a>1. 命令组合</h3><ol><li>「&amp;&amp; 操作」 当一条命令成功之后，执行下一条</li><li>「; 操作」 不管成功和失败，都执行下一条</li></ol><h3 id="2-把命令变文件"><a href="#2-把命令变文件" class="headerlink" title="2. 把命令变文件"></a>2. 把命令变文件</h3><ol><li>把命令组合写到一个文件，假设文件名是 onceDone</li><li>给文件添加可执行权限 「chmod +X onceDone」</li><li>运行脚本文件，需要正确的路径（用 bash 运行脚本文件） 「 sh onceDone [hello]」/「./onceDone [hello]」<ul><li>可以接收一个参数，在文件中修改即可，如 mkdir $1</li></ul></li><li>添加到 PATH ，就无需写路径了，可以直接运行 「onceDone」</li></ol><h2 id="五、添加新命令"><a href="#五、添加新命令" class="headerlink" title="五、添加新命令"></a>五、添加新命令</h2><p>下载安装 npm、yarn、node.js 工具并已添加到环境变量，可以直接使用该命令，npm 和 yarn 可以安装 JS 相关的包。</p><p>在官网下载的 Python 自带 pip 工具并已添加到环境变量，可以直接使用该命令，它可以安装 Python 相关的包。</p><p>与脚本文件有异曲同工之妙呀</p><h2 id="六、JS-相关命令"><a href="#六、JS-相关命令" class="headerlink" title="六、JS 相关命令"></a>六、JS 相关命令</h2><ol><li>npm 和 yarn – 包安装工具</li></ol><pre><code class="hljs vim">// 安装包npm i -g <span class="hljs-symbol">&lt;packageName&gt;</span>   yarn <span class="hljs-keyword">global</span> <span class="hljs-built_in">add</span> <span class="hljs-symbol">&lt;packageName&gt;</span>npm <span class="hljs-keyword">list</span> -g --depth=<span class="hljs-number">0</span>   yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">list</span>npm un -g <span class="hljs-symbol">&lt;packageName&gt;</span>  yarn <span class="hljs-keyword">global</span> <span class="hljs-built_in">remove</span> <span class="hljs-symbol">&lt;packageName&gt;</span>// 使用淘宝源npm i -g nrmyarn <span class="hljs-keyword">global</span> <span class="hljs-built_in">add</span> yrmnrm <span class="hljs-keyword">ls</span>                  yrm <span class="hljs-keyword">ls</span>nrm use taobao          yrm use taobao</code></pre><pre><code class="hljs cs"><span class="hljs-comment">// 使用 yarn 引入 jQuery，新增 node_modules 目录</span>yarn inityarn <span class="hljs-keyword">add</span> jquery</code></pre><pre><code class="hljs jboss-cli"><span class="hljs-string">//</span> 使用 yarn build 代替 parcel build <span class="hljs-string">...</span><span class="hljs-string">//</span> 先初始化，其中 -y, <span class="hljs-params">--yes</span>  use default options<span class="hljs-string">//</span> 在 package.json 中添加如下键值对 <span class="hljs-string">"scripts"</span><span class="hljs-function">:...</span><span class="hljs-string">//</span> 愉快简洁地打包yarn init -y  <span class="hljs-string">"scripts"</span>: &#123;    <span class="hljs-string">"build"</span>: <span class="hljs-string">"rm -rf dist &amp;&amp; parcel build src/index.html --no-minify --public-url ./"</span>  &#125; yarn bulid</code></pre><ol start="2"><li>tldr – 查询命令用法</li><li>http-server – 本地开 http 服务器</li><li>parcel – 打包工具</li></ol><pre><code class="hljs oxygene"><span class="hljs-comment">// 使用 parcel 开发</span>yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> parcelparcel src/<span class="hljs-keyword">index</span>.htmlparcel build src/<span class="hljs-keyword">index</span>.html --no-minify --<span class="hljs-keyword">public</span>-url ./</code></pre><ol start="5"><li>node – 开一个后端服务器</li><li>node-dev – 比 node 好用</li></ol><h2 id="七、Python-相关命令"><a href="#七、Python-相关命令" class="headerlink" title="七、Python 相关命令"></a>七、Python 相关命令</h2><ol><li>pip – 包安装工具</li></ol><pre><code class="hljs vim">pip install <span class="hljs-symbol">&lt;package_name&gt;</span>pip <span class="hljs-keyword">list</span>pip uninstall <span class="hljs-symbol">&lt;package_name&gt;</span>// 临时使用阿里云的源pip install <span class="hljs-symbol">&lt;package_name&gt;</span> -i http<span class="hljs-variable">s:</span>//mirrors.aliyun.<span class="hljs-keyword">com</span>/pypi/simple// 使用阿里云的源%appdata% 进入 AppData\Roaming 目录<span class="hljs-built_in">mkdir</span> pip<span class="hljs-keyword">cd</span> piptouch pip.ini<span class="hljs-keyword">echo</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">"[global]\ntimeout = 6000\nindex-url = https://mirrors.aliyun.com/pypi/simple/\ntrusted-host = mirrors.aliyun.com"</span> &gt; pip.ini</code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>代码编辑器</title>
    <link href="/2020/04/23/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2020/04/23/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>常用的两个代码编辑器的软件配置，内容包括 VS Code 配置，WebStorm 配置。</p><h2 id="一、VS-Code-配置"><a href="#一、VS-Code-配置" class="headerlink" title="一、VS Code 配置"></a>一、VS Code 配置</h2><h3 id="1-软件介绍"><a href="#1-软件介绍" class="headerlink" title="1. 软件介绍"></a>1. 软件介绍</h3><p>VSCode 全称 Visual Studio Code，是微软出的一款轻量级代码编辑器（免费、开源）。</p><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. 基本操作</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585400686174-7687c288-5a80-464b-9557-34c33dc2234f.png#align=left&display=inline&height=476&margin=%5Bobject%20Object%5D&originHeight=476&originWidth=582&size=0&status=done&style=none&width=582" srcset="/img/loading.gif" alt=""></p><p>安装时推荐勾选 1、2、4</p><ul><li>1 和 2 勾选，可以对文件、目录点击鼠标右键，选择使用 VScode 打开（超方便）</li><li>3 勾选，会让 VS Code 支持的代码文件全部变成 VS Code 默认打开，文件图标也会随之更改</li><li>4 勾选，会自动配置环境变量（很贴心）</li></ul><h3 id="3-界面介绍"><a href="#3-界面介绍" class="headerlink" title="3. 界面介绍"></a>3. 界面介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585400686114-af26d548-42c4-4c51-abf5-46d40aa97f96.png#align=left&display=inline&height=763&margin=%5Bobject%20Object%5D&originHeight=763&originWidth=1178&size=0&status=done&style=none&width=1178" srcset="/img/loading.gif" alt=""></p><h3 id="4-基本配置"><a href="#4-基本配置" class="headerlink" title="4. 基本配置"></a>4. 基本配置</h3><ol><li>「菜单栏」→「查看」→「外观」→「隐藏菜单栏」+「向右移动侧边栏」</li><li>「设置」→「Auto Save：onFocusChange」</li><li>「设置」→「√ Format On Save」</li><li>「设置」→「Font Family：’Fira Code’, Consolas, ‘Courier New’, monospace」</li><li>「设置」→「Font Ligatures：在 settings.json 中编辑」→「”editor.fontLigatures”: true」<h3 id="5-配置-VS-Code-终端"><a href="#5-配置-VS-Code-终端" class="headerlink" title="5. 配置 VS Code 终端"></a>5. 配置 VS Code 终端</h3></li></ol><p>VS Code 的默认 shell 是 powershell，我们要把它换成 Cmder 下的 bash</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585467606472-9d62c1e2-c104-4db8-8800-dd5800ce8c57.png#align=left&display=inline&height=110&margin=%5Bobject%20Object%5D&name=image.png&originHeight=220&originWidth=1308&size=17901&status=done&style=none&width=654" srcset="/img/loading.gif" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585468100013-a457a04b-7878-44f9-8ca5-e48391328d4c.png#align=left&display=inline&height=98&margin=%5Bobject%20Object%5D&name=image.png&originHeight=196&originWidth=1308&size=15897&status=done&style=none&width=654" srcset="/img/loading.gif" alt="image.png"></p><p>按照 <a href="https://github.com/cmderdev/cmder/wiki/Seamless-VS-Code-Integration#use-cmder-embedded-git-in-vscode" target="_blank" rel="noopener"><em>Cmder 的 Wiki</em></a> 进行配置，在 VS Code 打开 setting.json 文件，把这三条语句添加进去</p><pre><code class="hljs css">"<span class="hljs-selector-tag">git</span><span class="hljs-selector-class">.enabled</span>": <span class="hljs-selector-tag">true</span>,"<span class="hljs-selector-tag">git</span><span class="hljs-selector-class">.path</span>": "<span class="hljs-selector-attr">[cmder_root]</span>\\<span class="hljs-selector-tag">vendor</span>\\<span class="hljs-selector-tag">git-for-windows</span>\\<span class="hljs-selector-tag">cmd</span>\\<span class="hljs-selector-tag">git</span><span class="hljs-selector-class">.exe</span>","<span class="hljs-selector-tag">terminal</span><span class="hljs-selector-class">.integrated</span><span class="hljs-selector-class">.shell</span><span class="hljs-selector-class">.windows</span>": "<span class="hljs-selector-attr">[cmder_root]</span>\\<span class="hljs-selector-tag">vendor</span>\\<span class="hljs-selector-tag">git-for-windows</span>\\<span class="hljs-selector-tag">bin</span>\\<span class="hljs-selector-tag">bash</span><span class="hljs-selector-class">.exe</span>",</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585468357233-aee9d711-3366-4c5a-aa52-5b2798d39aae.png#align=left&display=inline&height=58&margin=%5Bobject%20Object%5D&name=image.png&originHeight=99&originWidth=1144&size=33114&status=done&style=none&width=669" srcset="/img/loading.gif" alt="image.png"></p><h3 id="6-好用的插件"><a href="#6-好用的插件" class="headerlink" title="6. 好用的插件"></a>6. 好用的插件</h3><ol><li>Chinese (Simplified) Language Pack for Visual Studio Code – 将 VS Code 界面变成简体中文</li><li>Code Spell Checker – 拼写检查器，帮助捕获常见的拼写错误</li><li>Markdown All in One – 包含了最常用的 Markdown 优化</li><li>Markdown Preview Github Styling – 采用 Github 使用的 Markdown 渲染样式</li><li>Vutur – Vue 插件工具</li><li>Vue VSCode Snippets – Vue 快捷输入工具</li></ol><h3 id="7-常用快捷键"><a href="#7-常用快捷键" class="headerlink" title="7. 常用快捷键"></a>7. 常用快捷键</h3><p><strong>软件操作相关</strong></p><p>把调出命令行从「Ctrl + Shift + P」改成 「Ctrl + A」</p><ol><li>「Ctrl + Shift + A」– 调出命令行（命令行操作无敌，能做很多事情）</li><li>「Ctrl + Shift + `」– 新建终端</li><li>「Ctrl + P」– 快速搜索文件</li><li>「Ctrl + K + S」– 查看或修改快捷方式</li><li>「F11」– 全屏</li></ol><p><strong>文本编辑相关</strong></p><ol><li>「Ctrl + C」/「Ctrl + V」– 如果不选中，默认复制或剪切一整行</li><li>「Alt + Up」/「Alt + Down」– 向上或向下移动一行</li><li>「Shift + Alt + Up」/「Shift + Alt + Down」– 向上或向下复制一行</li><li>「Shift + Delete」– 删除当前行</li><li>「Ctrl + Enter」/「Ctrl + Shift + Enter」– 在当前行下边或上边插入一行</li><li>「Home」/「End」– 移动到行首或行尾</li><li>「Ctrl + Home」/ 「Ctrl + End」– 移动到文件开头或结尾</li><li>「Shift + Home」/「Shift + End」– 选中到行首或行尾</li><li>「Ctrl + /」– 切换文本注释</li><li>「! + Tab」/「div + Tab」/「ul&gt;li + Tab」 – Emmet 快捷操作</li><li>「Ctrl + F」/「Ctrl + H」– 查找或替换</li><li>「Alt + Z」– 切换自动换行</li><li>「Alt + 单机」– 多位置输入</li></ol><p><strong>Markdown 插件下的快捷键和命令</strong><br>**</p><ol><li>「Ctrl + K V」– 预览到另一边</li><li>「Ctrl + Shift + V」– 预览</li><li>「Ctrl + M」– 切换数学环境</li><li>「Markdown: Create Table of Contents」– 创建目录</li><li>「Markdown: Update Table of Contents」– 更新目录</li><li>「Markdown: Print current document to HTML」– 打印当前文档到 HTML<h3 id="8-常用命令"><a href="#8-常用命令" class="headerlink" title="8. 常用命令"></a>8. 常用命令</h3></li></ol><ol><li>「Format Document」– 格式化文档</li><li>「File: Toggle Auto Save」– 切换自动保存</li><li>「View: Toggle Word Wrap」– 切换自动换行</li><li>「Emmet: Wrap Individual Lines with Abbreviation」– 输入缩写包围个别行<ul><li>选中多个数据 → 输入缩写包围个别字 →「div* + Enter」</li><li>选中多个数据 → 输入缩写包围个别字 →「ul&gt;li* + Enter」</li></ul></li></ol><h2 id="二、WebStorm-配置"><a href="#二、WebStorm-配置" class="headerlink" title="二、WebStorm 配置"></a>二、WebStorm 配置</h2><h3 id="1-软件介绍-1"><a href="#1-软件介绍-1" class="headerlink" title="1. 软件介绍"></a>1. 软件介绍</h3><p>WebStorm 是 JetBrains 公司旗下一款 JavaScript 开发工具（收费，多多支持正版）。</p><h3 id="2-界面概览"><a href="#2-界面概览" class="headerlink" title="2. 界面概览"></a>2. 界面概览</h3><p>WebStorm 没有中文版，多多熟悉界面。</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1586271936422-88c08d04-32d5-4b53-aeaa-30eb4cf06a0d.png#align=left&display=inline&height=971&margin=%5Bobject%20Object%5D&name=Snipaste_2020-04-07_22-07-26.png&originHeight=971&originWidth=1347&size=77696&status=done&style=none&width=1347" srcset="/img/loading.gif" alt="Snipaste_2020-04-07_22-07-26.png"></p><h3 id="3-基本配置"><a href="#3-基本配置" class="headerlink" title="3. 基本配置"></a>3. 基本配置</h3><ol><li>将侧边栏移动到右边</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1586313712619-eb654323-4170-4dc8-9fda-2bc417568cec.png#align=left&display=inline&height=424&margin=%5Bobject%20Object%5D&name=image.png&originHeight=508&originWidth=635&size=154191&status=done&style=none&width=530" srcset="/img/loading.gif" alt="image.png"></p><ol start="2"><li>字体设置为 “Fira Code”，启动连体字</li></ol><p>「Settings」→「Font」→「Font：Fira Code」+「Size：14」+「√ Enable font ligatures」</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1586314097138-8c30c6b3-9b75-4a59-8a27-4daa6babb6d2.png#align=left&display=inline&height=238&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=1224&size=47641&status=done&style=none&width=746" srcset="/img/loading.gif" alt="image.png"></p><ol start="3"><li>修改快捷键在 「settings」找到 Keymap 修改</li></ol><p>把 Tool Windows → Terminal 从「Alt + F12」改成「Ctrl + Shift + `」<br>把 Navigate → File 从「Ctrl + Shift + N」改成「Ctrl + P」<br>把 重做 Redo 从「Ctrl + Shift + Z」改成 「Ctrl + Y」</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1588767090625-7dc57463-32d7-4462-b898-ed1843a9f87b.png#align=left&display=inline&height=338&margin=%5Bobject%20Object%5D&name=image.png&originHeight=676&originWidth=1202&size=73624&status=done&style=none&width=601" srcset="/img/loading.gif" alt="image.png"></p><ol start="4"><li>修改界面主题</li></ol><p>在插件（plugins）里面搜索「Material Theme UI」并安装，然后在选项里自己配，里面点点点</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1588767167909-80501ce7-7865-45f6-84fc-e6f8df9177b2.png#align=left&display=inline&height=329&margin=%5Bobject%20Object%5D&name=image.png&originHeight=549&originWidth=999&size=72669&status=done&style=none&width=598" srcset="/img/loading.gif" alt="image.png"></p><h3 id="4-配置-WebStorm-终端"><a href="#4-配置-WebStorm-终端" class="headerlink" title="4. 配置 WebStorm 终端"></a>4. 配置 WebStorm 终端</h3><p>把终端换成 Cmder 下的 Bash</p><ol><li>「Settings」→「Tools」→「Terminal」→「Shell path：bash路径」，我的路径如下</li></ol><pre><code class="hljs taggerscript">D:<span class="hljs-symbol">\S</span>oftwares<span class="hljs-symbol">\c</span>mder<span class="hljs-symbol">\v</span>endor<span class="hljs-symbol">\g</span>it-for-windows<span class="hljs-symbol">\b</span>in<span class="hljs-symbol">\b</span>ash.exe</code></pre><ol start="2"><li>「Settings」→「Version Control」→「Git」→「Path to Git executable：git路径」，我的路径如下</li></ol><pre><code class="hljs taggerscript">D:<span class="hljs-symbol">\S</span>oftwares<span class="hljs-symbol">\c</span>mder<span class="hljs-symbol">\v</span>endor<span class="hljs-symbol">\g</span>it-for-windows<span class="hljs-symbol">\c</span>md<span class="hljs-symbol">\g</span>it.exe</code></pre><p>错误示例：</p><p>我根据网上教程将「Shell path：bash路径」设置成如下，发现不可用</p><pre><code class="hljs groovy"><span class="hljs-string">"cmd.exe"</span> /k <span class="hljs-string">""</span><span class="hljs-string">D:</span>\cmder\vendor\init.bat<span class="hljs-string">""</span></code></pre><h3 id="5-常用快捷键"><a href="#5-常用快捷键" class="headerlink" title="5. 常用快捷键"></a>5. 常用快捷键</h3><ol><li>「Ctrl + Shift + A」– 调出命令行</li><li>「Shift Shift」– 全部搜索</li><li>「Ctrl + Shift + `」– 调出终端</li><li>「Alt + 1」– 调出侧边栏</li><li>Show Reformat File Dialog – 设置格式化</li><li>Reformat Code – 格式化代码</li><li>File and Code Templates – 设置新建文件的模板</li><li>Code Style – 设置代码风格</li></ol><h2 id="三、Vim"><a href="#三、Vim" class="headerlink" title="三、Vim"></a>三、Vim</h2><p>Vim 是一个具有很多命令的功能的编辑器。</p><h3 id="1-查看使用教程"><a href="#1-查看使用教程" class="headerlink" title="1. 查看使用教程"></a>1. 查看使用教程</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">vimtutor</span></code></pre><h3 id="2-退出-Vim"><a href="#2-退出-Vim" class="headerlink" title="2. 退出 Vim"></a>2. 退出 Vim</h3><pre><code class="hljs clojure"><span class="hljs-symbol">:q!</span></code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>顺手的软件配置（下）</title>
    <link href="/2020/04/23/%E9%A1%BA%E6%89%8B%E7%9A%84%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2020/04/23/%E9%A1%BA%E6%89%8B%E7%9A%84%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>软件配置的相关内容，内容包括 Cmder 配置、Node.js 配置、Yarn 配置、GitHub、SSH key、Ali Cloud Server。</p><h2 id="一、Cmder-配置"><a href="#一、Cmder-配置" class="headerlink" title="一、Cmder 配置"></a>一、Cmder 配置</h2><h3 id="1-软件介绍"><a href="#1-软件介绍" class="headerlink" title="1. 软件介绍"></a>1. 软件介绍</h3><p>一个不错的控制台软件，内置 Git Bash，也支持 CMD 和 PowerShell，所以不必同时安装 Git Bash 和 Cmder</p><p>安装之后自然就有了 Git 命令，自然就有了一些 Linux 上命令</p><p>Git Bash 不是 Git，是 Git 团队出品的 Bash 软件</p><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h3><ol><li>下载的压缩包右击属性解除锁定</li><li>解压到自己喜欢的目录</li><li>语言设置成中文时可能有 bug，则在配置文件里找到 “language” 手动把 “en” 改成 “zh”</li></ol><h3 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h3><ol><li>「设置」→「通用」→「Interface language:简体中文」</li><li>「设置」→「Quake 风格」→「√ Quake式向下滑动」+「√ 失去焦点时自动隐藏」+「√ 始终在顶层」</li><li>「设置」→「大小&amp;位置」→「窗口大小:√ 正常，宽度 → 75%，高度 → 100%」</li><li>「设置」→「启动」→「指定命名任务:{bash::bash}」</li><li>「设置」→「按键 &amp; 宏」→「Alt+D:向右分屏」+「Alt+Shift+D:向下分屏」</li><li>「设置」→「任务」→「设置{bash::bash}的启动目录: d:/Depository」</li></ol><ol start="7"><li>把命令提示符 λ 改成 $，在安装目录下打开 git-prompt.sh 文件，我的文件目录如下</li></ol><pre><code class="hljs taggerscript">D:<span class="hljs-symbol">\S</span>oftwares<span class="hljs-symbol">\c</span>mder<span class="hljs-symbol">\v</span>endor<span class="hljs-symbol">\g</span>it-for-windows<span class="hljs-symbol">\e</span>tc<span class="hljs-symbol">\p</span>rofile.d</code></pre><p>Ctrl + F 全文搜索 λ 就能找到它</p><pre><code class="hljs routeros"><span class="hljs-attribute">PS1</span>=<span class="hljs-string">"<span class="hljs-variable">$PS1</span>"</span><span class="hljs-string">'λ'</span>  →→  <span class="hljs-attribute">PS1</span>=<span class="hljs-string">"<span class="hljs-variable">$PS1</span>"</span><span class="hljs-string">'$'</span></code></pre><h3 id="3-常用快捷键"><a href="#3-常用快捷键" class="headerlink" title="3. 常用快捷键"></a>3. 常用快捷键</h3><ul><li>用鼠标选中文字即自动复制</li><li>单击鼠标右键就是粘贴</li><li>Shift + Insert 也是粘贴</li></ul><ol><li>「Ctrl + `」– 调出软件界面</li><li>「Ctrl +T」 – 新开控制台（console）</li><li>「Ctrl + W」– 关闭活动的控制台</li><li>「Alt + D」– 向右分屏</li><li>「Alt + Shift + D」– 向下分屏</li></ol><h2 id="二、Node-js-配置"><a href="#二、Node-js-配置" class="headerlink" title="二、Node.js 配置"></a>二、Node.js 配置</h2><h3 id="1-软件介绍-1"><a href="#1-软件介绍-1" class="headerlink" title="1. 软件介绍"></a>1. 软件介绍</h3><p>Node.js 是可以使用 JavaScript 搭建后端服务器的一个平台</p><p>安装之后自然就有了 node 命令（因为 PATH），自然就有了 npm 命令，自然就有了 npx 命令</p><p>npm 的全称是 Node Package Manager，包管理工具</p><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. 基本操作</h3><ol><li>安装双数版本，双数版本是稳定版</li><li>安装目录不允许有空格</li><li>安装时配置全勾上（默认是全勾上的）</li></ol><h3 id="3-基本配置"><a href="#3-基本配置" class="headerlink" title="3. 基本配置"></a>3. 基本配置</h3><p>node.js 的默认服务器是国外的，我们配置淘宝的镜像服务器，使用淘宝源，不使用 cnpm 源</p><pre><code class="hljs properties"><span class="hljs-attr">npm</span> <span class="hljs-string">i nrm -g</span><span class="hljs-attr">nrm</span> <span class="hljs-string">Is</span><span class="hljs-attr">nrm</span> <span class="hljs-string">use taobao</span></code></pre><h2 id="三、Yarn-配置"><a href="#三、Yarn-配置" class="headerlink" title="三、Yarn 配置"></a>三、Yarn 配置</h2><p>yarn 是用来代替 npm 的，bug 更少，速度更快，同时不要使用 npm 安装 yarn</p><p>nrm 的淘宝源改动会自动作用到 yarn 上，如果发现没有，就手动修改源</p><pre><code class="hljs oxygene">yarn <span class="hljs-keyword">global</span> <span class="hljs-keyword">add</span> yamyrm <span class="hljs-keyword">Is</span>yrm use taobao</code></pre><h2 id="四、SSH-key"><a href="#四、SSH-key" class="headerlink" title="四、SSH key"></a>四、SSH key</h2><p>运行以下命令，一路回车，不必管它的提示输密码，直接忽略</p><pre><code class="hljs angelscript">ssh-keygen -t rsa -b <span class="hljs-number">4096</span> -C &lt;邮箱&gt;</code></pre><p>在 ~/.ssh 目录下生成了两个个文件，它们分别是公钥和私钥，公钥可以随意复制给别人看，私钥自己保存好</p><pre><code class="hljs css"><span class="hljs-selector-tag">id_rsa</span><span class="hljs-selector-tag">id_rsa</span><span class="hljs-selector-class">.pub</span></code></pre><p>将公钥内容复制粘贴到网站的 SSH keys 里，公钥内容以 ssh 开头，邮箱结尾。我们上传代码是私钥加密，网站是使用公钥解密。</p><h2 id="五、Git-命令"><a href="#五、Git-命令" class="headerlink" title="五、Git 命令"></a>五、Git 命令</h2><p>Git 的 6 行配置</p><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global user.name &lt;名字&gt;git<span class="hljs-built_in"> config </span>--global user.email &lt;邮箱&gt;git<span class="hljs-built_in"> config </span>--global push.default simplegit<span class="hljs-built_in"> config </span>--global core.quotepath <span class="hljs-literal">false</span>git<span class="hljs-built_in"> config </span>--global core.editor <span class="hljs-string">"code --wait"</span>git<span class="hljs-built_in"> config </span>--global core.autocrlf input</code></pre><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>顺手的软件配置（上）</title>
    <link href="/2020/04/23/%E9%A1%BA%E6%89%8B%E7%9A%84%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2020/04/23/%E9%A1%BA%E6%89%8B%E7%9A%84%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>软件配置的相关内容，内容包括 Windows 配置、输入法配置、Everything 配置、Xmind:Zen 配置、小飞机配置、Chrome 配置。</p><h2 id="一、Windows-配置"><a href="#一、Windows-配置" class="headerlink" title="一、Windows 配置"></a>一、Windows 配置</h2><h3 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h3><ol><li>「控制面板」→「硬件和声音」→「电源选项」→「系统设置」→<ul><li>「按电源按钮时：睡眠（用电池 / 接通电源）」</li><li>「按睡眠按钮时：睡眠（用电池 / 接通电源）」</li><li>「关闭盖子时：休眠（用电池 / 接通电源）」</li></ul></li><li>「控制面板」→「硬件和声音」→「电源选项」→「编辑计划设置」→<ul><li>「关闭显示器：15 分钟（用电池 / 接通电源）」</li><li>「使计算机进入睡眠状态：30 分钟（用电池），从不（接通电源）」</li></ul></li><li>「显示文件后缀」+「显示隐藏文件」</li><li>「任务栏、桌面把图标清理干净」</li><li>常规目录放到动到 D 盘</li><li>几个修饰键：Ctrl / Shift / Alt / Win / Cmd / Tab / Esc</li><li>平时不关机，盖子一合，进入休眠模式</li></ol><h3 id="2-常用快捷键"><a href="#2-常用快捷键" class="headerlink" title="2. 常用快捷键"></a>2. 常用快捷键</h3><ol><li>「Win + Desktop」– 展示桌面</li><li>「Win + 方向键」– 移动窗口</li><li>「Alt + Tab」– 切换窗口</li><li>「Win + Tab」– 不怎么常用的切换窗口</li><li>「Win + Ctrl + 方向键」– 切换桌面</li><li>「Ctrl + A / C / V / Z / Y」</li><li>「Ctrl + R」 / 「F5」– 刷新</li><li>「Ctrl + P」– 打印</li></ol><h2 id="二、输入法配置"><a href="#二、输入法配置" class="headerlink" title="二、输入法配置"></a>二、输入法配置</h2><h3 id="1-基本配置-1"><a href="#1-基本配置-1" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h3><p>我使用的是「搜狗拼音输入法」中的「小鹤双拼」方案</p><ol><li>把状态栏调整成顺手的长度</li><li>「设置」→「常用」→「双拼」→「方案：小鹤双拼」+「√ 双拼下同时使用全拼音」</li><li>「设置」→「外观」→「候选项数：7」</li><li>把联网的功能全部关掉</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585373711132-0f208cd5-30fa-4089-9abc-166a799ce38a.png#align=left&display=inline&height=114&margin=%5Bobject%20Object%5D&originHeight=114&originWidth=396&size=0&status=done&style=none&width=396" srcset="/img/loading.gif" alt=""><br><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585373711128-c9c6cf3a-531a-4964-b77e-33f76a4d6f79.png#align=left&display=inline&height=50&margin=%5Bobject%20Object%5D&originHeight=50&originWidth=220&size=0&status=done&style=none&width=220" srcset="/img/loading.gif" alt=""></p><h3 id="2-常用快捷键-1"><a href="#2-常用快捷键-1" class="headerlink" title="2. 常用快捷键"></a>2. 常用快捷键</h3><ol><li>「Ctrl + Shift + Z」– 调出表情和符号</li><li>「Shift + U + ‘拆解字’」– 查不认识的字的读音</li></ol><h3 id="3-小鹤双拼"><a href="#3-小鹤双拼" class="headerlink" title="3. 小鹤双拼"></a>3. 小鹤双拼</h3><p><em>练习小鹤双拼的地方：→ <a href="https://api.ihint.me/shuang/" target="_blank" rel="noopener">点击这里</a></em><br>_<br><img src="https://cdn.nlark.com/yuque/0/2020/png/916537/1585373711129-1085fafd-6c11-409f-b7aa-9d238a48e696.png#align=left&display=inline&height=760&margin=%5Bobject%20Object%5D&originHeight=760&originWidth=578&size=0&status=done&style=none&width=578" srcset="/img/loading.gif" alt=""></p><h2 id="三、Everything-配置"><a href="#三、Everything-配置" class="headerlink" title="三、Everything 配置"></a>三、Everything 配置</h2><h3 id="1-基本配置-2"><a href="#1-基本配置-2" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h3><ol><li>「设置」→「界面」→「√ 单机托盘图标打开搜索窗口」</li><li>「设置」→「结果」→「√ 搜索关键词为空时不显示搜索结果」</li><li>「设置」→「结果」→「√ 双击路径列打开目录」</li></ol><h2 id="四、Xmind-Zen-配置"><a href="#四、Xmind-Zen-配置" class="headerlink" title="四、Xmind:Zen 配置"></a>四、Xmind:Zen 配置</h2><h3 id="1-常用快捷键"><a href="#1-常用快捷键" class="headerlink" title="1. 常用快捷键"></a>1. 常用快捷键</h3><ol><li>「Ctrl + /」– 折叠或展开子主题</li><li>「Tab」– 添加子主题</li><li>「Enter」– 之后添加主题</li><li>「Ctrl Enter」– 添加父主题</li><li>「Spacebar」– 编辑主题</li><li>「Shift + Enter（编辑状态下）」– 换行</li><li>「Enter（编辑状态下）」– 结束编辑</li></ol><h2 id="五、小飞机-配置"><a href="#五、小飞机-配置" class="headerlink" title="五、小飞机 配置"></a>五、小飞机 配置</h2><h3 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h3><ol><li>登录官网购买服务器并仔细阅读使用教程</li><li>下载客户端并添加服务器节点（下载配置文件直接导入）</li><li>测试筛选出好用的网速快的节点（不是每一个节点都是好的）</li><li>使用「Chrome」中的插件「SwitchyOmega」管理代理</li></ol><h3 id="2-SwitchyOmega-的使用"><a href="#2-SwitchyOmega-的使用" class="headerlink" title="2. SwitchyOmega 的使用"></a>2. SwitchyOmega 的使用</h3><ul><li>之前有配置文件的就先导入之前的配置</li><li>直接连接 / XX代理 / 自动切换 – 不使用代理 / 使用代理 / 智能使用代理</li><li>添加条件 – 添加并保存当前页面的连接方式</li></ul><h2 id="六、Chrome-配置"><a href="#六、Chrome-配置" class="headerlink" title="六、Chrome 配置"></a>六、Chrome 配置</h2><h3 id="1-好用的插件"><a href="#1-好用的插件" class="headerlink" title="1. 好用的插件"></a>1. 好用的插件</h3><ol><li>SwitchyOmega  – 管理浏览器的代理</li><li>uBlock Origin – 广告屏蔽</li><li>Evernote Web Clipper – 保存完整网页到印象笔记</li><li>Separate Window – 开启小窗播放视频</li><li>Death To _blank – 阻止链接在开一个新标签打开</li><li>JSON Viewer – 可以直接解析 JSON 文件</li></ol><h3 id="2-调出配置相关的快捷方式"><a href="#2-调出配置相关的快捷方式" class="headerlink" title="2. 调出配置相关的快捷方式"></a>2. 调出配置相关的快捷方式</h3><ol><li>chrome://settings/– 设置</li><li>chrome://apps/– 管理应用</li><li>chrome://extensions/– 管理插件</li></ol><h3 id="3-常用快键键"><a href="#3-常用快键键" class="headerlink" title="3. 常用快键键"></a>3. 常用快键键</h3><ol><li>「鼠标中键单机」– 打开或者关闭</li><li>「Ctrl + T」–  新开标签</li><li>「Ctrl + Shift + T」– 撤销关闭</li><li>「Ctrl + 点击」– 在新标签打开</li><li>「Ctrl + W」– 关闭当前标签</li><li>「Ctrl + R」/「F5」 – 刷新</li><li>「Ctrl + L」– 输入网址</li><li>「Ctrl + Page Up / Page Down」– 切换到上/下一个标签</li><li>「Ctrl + Shift + I」/ 「F12」– 打开发者工具</li><li>「Alt + ← / →」– 前进/后退</li><li>「Alt + Enter」– 在新标签打开</li><li>「Shift + Enter」– 在新窗口打开</li><li>「Ctrl + Shift + Delete」– 删除历史浏览数据</li><li>「Ctrl + N」– 新建窗口</li><li>「Ctrl + Shift + N」– 新建无痕标签</li><li>「Ctrl + P」– 打印</li></ol><h3 id="4-Ctrl-P-的打印配置"><a href="#4-Ctrl-P-的打印配置" class="headerlink" title="4. Ctrl + P 的打印配置"></a>4. Ctrl + P 的打印配置</h3><ol><li>「边距：无」</li><li>「√ 背影图形」</li><li>「× 页眉和页脚」</li></ol><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>好用的软件和工具</title>
    <link href="/2020/04/23/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%92%8C%E5%B7%A5%E5%85%B7/"/>
    <url>/2020/04/23/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%92%8C%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<p>在这里列举用的比较顺手的软件和工具，未来有更好的或喜欢的工具会更新哒。</p><h3 id="1-Everything"><a href="#1-Everything" class="headerlink" title="1. Everything"></a>1. Everything</h3><p>轻量级的电脑搜索软件，查询文件特别方便好用，必备软件之一</p><p><em>官网：→ <a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="2-Xmind-Zen"><a href="#2-Xmind-Zen" class="headerlink" title="2. Xmind:Zen"></a>2. Xmind:Zen</h3><p>简洁优雅的思维导图软件，做笔记、理思路的好帮手</p><p><em>官网：→ <a href="https://www.xmind.cn/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="3-小飞机"><a href="#3-小飞机" class="headerlink" title="3. 小飞机"></a>3. 小飞机</h3><p>学会科学上网，能够查到许多有用的资料</p><p><em>官网：→ <a href="https://shadowsocks.com/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="4-Chrome"><a href="#4-Chrome" class="headerlink" title="4. Chrome"></a>4. Chrome</h3><p>推荐使用的浏览器，速度快且功能强大，有翻译功能，还可以装个性化插件，必备软件之一</p><p><em>官网：→ <a href="https://www.google.com/intl/zh-CN/chrome/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="5-iciba-com"><a href="#5-iciba-com" class="headerlink" title="5. iciba.com"></a>5. iciba.com</h3><p>查英文地方，直接在浏览器输入网址就行了，方便快捷</p><h3 id="6-Visual-Studio-Code"><a href="#6-Visual-Studio-Code" class="headerlink" title="6. Visual Studio Code"></a>6. Visual Studio Code</h3><p>一款免费、轻量、功能强大的代码编辑器</p><p><em>官网：→ <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="7-WebStorm"><a href="#7-WebStorm" class="headerlink" title="7. WebStorm"></a>7. WebStorm</h3><p>_<br>一款智能、功能强大的 JavaScript 代码编辑器，Web 前端开发神器<br>_<br><em>官网：→ <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="8-Cmder"><a href="#8-Cmder" class="headerlink" title="8. Cmder"></a>8. Cmder</h3><p>特别好用的命令行工具</p><p><em>官网：→ <a href="https://cmder.net/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="9-Node-js"><a href="#9-Node-js" class="headerlink" title="9. Node.js"></a>9. Node.js</h3><p>一个基于Chrome JavaScript 运行时建立的一个平台，安装之后附带 npm 包管理工具</p><p><em>官网：→ <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="10-Yarn"><a href="#10-Yarn" class="headerlink" title="10. Yarn"></a>10. Yarn</h3><p>也是一个包管理工具，比 npm 后推出，比 npm 好用</p><p><em>官网：→ <a href="https://yarnpkg.com/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="11-GitHub"><a href="#11-GitHub" class="headerlink" title="11. GitHub"></a>11. GitHub</h3><p>繁荣的开源社区，可上传自己代码，一个特别 Nice 的分享成果的平台</p><p><em>官网：→ <a href="https://github.com/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="12-SSH-key"><a href="#12-SSH-key" class="headerlink" title="12. SSH key"></a>12. SSH key</h3><p>生成 SSH key，把自己写的代码使用密钥传输到 GitHub 上，一定要会，这样就不用每次上传代码输入密码了</p><h3 id="13-Ali-Cloud-Server"><a href="#13-Ali-Cloud-Server" class="headerlink" title="13. Ali Cloud Server"></a>13. Ali Cloud Server</h3><p>在这里可以购买一台属于自己的服务器，用做学习使用，因为是国内服务器，访问速度比 GitHub 快</p><p><em>官网：→ <a href="https://cn.aliyun.com/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="14-Foxmail"><a href="#14-Foxmail" class="headerlink" title="14. Foxmail"></a>14. Foxmail</h3><p>管理邮件的软件，使用很方便</p><p><em>官网：→ <a href="https://www.foxmail.com/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="15-微信-PC-版"><a href="#15-微信-PC-版" class="headerlink" title="15. 微信 PC 版"></a>15. 微信 PC 版</h3><p>手机与电脑传文字、图片，聊天</p><p><em>官网：→ <a href="https://pc.weixin.qq.com/" target="_blank" rel="noopener">点击这里</a></em></p><h3 id="16-印象笔记"><a href="#16-印象笔记" class="headerlink" title="16. 印象笔记"></a>16. 印象笔记</h3><p>笔记神器，微信公众号、手机、浏览器看到喜欢的文章很容易保存到该笔记中，并且在手机、电脑上看到的笔记是同步的，必备软件之一</p><p><em>官网：→ <a href="https://www.yinxiang.com/" target="_blank" rel="noopener">点击这里</a></em><br>_</p><h3 id="17-欧路词典"><a href="#17-欧路词典" class="headerlink" title="17. 欧路词典"></a>17. 欧路词典</h3><p>好用的英语词典软件，英语翻译的好帮手</p><p><em>官网：→ <a href="https://www.eudic.net/v4/en/app/eudic" target="_blank" rel="noopener">点击这里</a></em></p><p><em>「@浪里淘沙的小法师」</em></p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
